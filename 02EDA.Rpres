探索式資料分析
========================================================
author: 長庚資管 曾意儒 Yi-Ju Tseng
date: 2017/07/31
autosize: true
font-family: 'Microsoft JhengHei'
navigation: slide


資料分析步驟
========================================================
- 資料匯入
- 資料清洗處理並轉換為Tidy data
- **資料分析**
- 資料呈現與視覺化


資料分析大綱
====================================
type:sub-section 

- 什麼是探索式資料分析
- 量化的分析方式
- dplyr

什麼是探索式資料分析
====================================
type:sub-section 

- 探索式資料分析 (**E**xploratory **D**ata **A**nalysis)
- 在資料量 大/雜/髒 的時候，探索式資料分析非常重要
- 運用**視覺化**、**基本的統計**等工具，反覆的探索**資料特性**，獲取資料所包含的資訊、結構和特點
- 在進行複雜或嚴謹的分析之前，必須要對資料有更多認識，才能訂定**對的資料分析方向**
- 通常**不需要**嚴謹的假設和細節呈現


探索式資料分析
====================================
- 分析各變數間的**關聯性**，看是否有預料之外的有趣發現
- 觀察資料內容是否符合預期，若否，檢查資料**是否有誤**
- 檢查資料是否符合分析前的假設

透過探索性分析來**調整分析的方向**，減少因分析方向錯誤所造成的時間浪費。

探索式資料分析
====================================

- 圖形化Graphical
    - 單變量Univariate
    - 雙變量Bivariate
    - 多變量Multivariate
    
- 量化Quantitative
    - 單變量Univariate
    - 雙變量Bivariate
    - 多變量Multivariate

圖形化的分析
====================================
包括做圖與列表，將會在下章節介紹，本章節著重於量化的分析方式。


量化的分析方式: 單變量
====================================
資料初步統計，量化的分析方式可包含

- 計算集中趨勢
    - 平均值 Mean `mean()`
    - 中位數 Median `median()`
    - 眾數 Mode，R無內建函數，可直接用`table()`找出現次數最多的資料
    
量化的分析方式: 單變量-集中趨勢
====================================
```{r message=F}
# 讀入資料，請將檔案放在專案路徑下
library(readr)
EMDiagS <- read_csv("EMDiagS.csv")
# 平均
mean(EMDiagS$疾病序號)
```

量化的分析方式: 單變量-集中趨勢
====================================
```{r message=F}
# 中位數
median(EMDiagS$疾病序號)
# 個數計算
table(EMDiagS$掛號科別)
```
    
量化的分析方式: 單變量
====================================
資料初步統計，量化的分析方式可包含

- 計算資料分散程度
    - 最小值 Min `min()`
    - 最大值 Max `max()`
    - 範圍 Range `range()`
    - 四分位差 Quartiles `quantile()`
    - 變異數 Variance `var()`
    - 標準差 Standard deviation `sd()`
    
量化的分析方式: 單變量-分散程度
====================================
```{r}
# 讀入疾病統計檔資料，請將檔案放在專案路徑下
DiagSumS <- read_csv("DiagSumS.csv")
min(DiagSumS$住院天數)
max(DiagSumS$住院天數)
range(DiagSumS$住院天數)
```

量化的分析方式: 單變量
====================================
```{r message=F}
quantile(DiagSumS$住院天數)
var(DiagSumS$住院天數)
sd(DiagSumS$住院天數)
```


量化的分析方式: 雙變量
====================================
- 列聯表 Crosstabs `table()`, `prop.table()`
- 相關性 Correlation `cor()`

量化的分析方式: 雙變量-列聯表
====================================
院區與14天內再次住院的關係
```{r}
table(DiagSumS$院區,
      DiagSumS$`14天內再次住院註記`)
```

量化的分析方式: 卡方
====================================
院區與14天內再次住院的關係
```{r}
chisq.test(table(DiagSumS$院區,
      DiagSumS$`14天內再次住院註記`))
```

量化的分析方式: 雙變量-相關性
====================================
油耗跟馬力的關聯性（相關係數）
```{r}
cor(DiagSumS$年齡,
    DiagSumS$住院天數)
```

量化的分析方式: 雙變量-平均相比
====================================
```{r}
t.test(住院天數~`14天內再次住院註記`,DiagSumS)
```

量化的分析方式 w/ R
====================================
- 大多可用R的內建函數完成計算
- 但是在探索式分析時，常常需要**資料分組**
    - 觀察**男性**和**女性**的血壓差異
    - **Case**與**Control**的共病比例差異
    - 接受**治療A**和**治療B**的成效
    - ...等
- 若只用基本的內建函數計算，相當耗時
    - `data.table`和`dplyr` packages可以快速完成**分組分析**!

data.table 參考文件與資源
====================================
- [官網](https://github.com/Rdatatable/data.table/wiki)
- 指令全集[The data.table R package cheat sheet](https://s3.amazonaws.com/assets.datacamp.com/img/blog/data+table+cheat+sheet.pdf)
- [A data.table R tutorial by DataCamp](https://www.datacamp.com/community/tutorials/data-table-r-tutorial#gs.vzMYa_k)
- DataCamp [互動式教學課程](https://www.datacamp.com/courses/data-table-data-manipulation-r-tutorial)


dplyr
====================================
type:sub-section 

- [Hadley Wickham](http://hadley.nz/)開發
- 使用以下函數分析整理資料：
    - `select()`: 選要分析的欄位，欄位子集 (Column)
    - `filter()`: 選要分析的觀察值，觀察值子集 (Row)
    - `mutate()`: 增加新欄位
    - `summarise()`: 計算統計值

dplyr
====================================
type:sub-section 

- 使用以下函數分析整理資料：
    - `group_by()`: 分組依據
    - `arrange()`: 觀察值排序
    - `rename()`: 欄位重新命名
    - `%>%`: the “pipe” operator 連結上述函式，將所有函式計算串在一起執行

dplyr
====================================

如要使用必須安裝並載入`dplyr` package
```{r eval=F}
install.packages("dplyr") ##安裝
```
```{r message=F}
library(dplyr) ##載入
```

以住院疾病統計檔為例，首先先讀入資料
```{r}
library(readr)
# 讀入疾病統計檔資料，請將檔案放在專案路徑下
DiagSumS <- read_csv("DiagSumS.csv") 
```

欄位(Column)子集 select() 
====================================
- 針對欄位 (Column)做子集
- `select(資料名稱,欄位條件1,欄位條件2,...)`
- 條件1與條件2是使用**或**的連結概念


欄位(Column)子集 select() 
====================================
- `dplyr`提供幾個方便篩選名稱的函式：
    - `starts_with()`
    - `ends_with()`
    - `contains()`
    - `matches()`: matches a regular expression
    - `num_range()`: num_range("x", 8:11).
    - `one_of()`: variables in character vector
    - `everything()`

詳細說明可在R執行視窗中輸入`?select_helpers`查看。

欄位(Column)子集 select() 
====================================
篩選欄位名稱為`年齡`、開頭是`診斷類別`或是結尾是`日期`的欄位
```{r select1,eval=F}
select1<-
    select(DiagSumS,年齡,starts_with("診斷類別"),
            ends_with("日期"))
head(select1)
```
```{r select1.1,echo=F}
select1<-
    select(DiagSumS,年齡,starts_with("診斷類別"),
            ends_with("日期"))
knitr::kable(head(select1,1)) 
```

欄位(Column)子集 select() 
====================================

若想篩選欄位`性別`到欄位`來源別`間的所有欄位，但不想要`妊娠期`欄位
- 用`:`串連欄位名稱
- 用`-`去除不要的欄位
```{r selec3,eval=F}
select3<-
    select(DiagSumS,性別:來源別,-妊娠期)
head(select3,3)
```
```{r selec3.1,echo=F}
select3<-
    select(DiagSumS,性別:來源別,-妊娠期)
knitr::kable(head(select3,3))
```

觀察值(Row)子集 filter()
====================================
- 是針對列 (Row)做子集
- `filter(資料名稱,篩選條件1,篩選條件2)`篩選條件們是用**且**的邏輯串連
- **來源別為E**的診斷資料，可輸入下列指令
```{r filter1,eval=F}
filter(DiagSumS,來源別=="E")
```
```{r filter1.1,echo=F}
filter1<-filter(DiagSumS,來源別=="E")
knitr::kable(filter1 %>% select(院區,來源別,ends_with("日期")) %>% head())
```

觀察值(Row)子集 filter()
====================================
也可選擇住院天數大於50的資料
```{r filter2,eval=F}
filter(DiagSumS,住院天數 > 50)
```
```{r filter2.1,echo=F}
knitr::kable(filter(DiagSumS,住院天數 > 50)%>% select(院區,來源別,住院天數,ends_with("日期")) %>% head())
```


觀察值(Row)子集 filter()
====================================
也可使用 `&` 和 `|`等符號串連邏輯
```{r filter4,eval=F}
filter(DiagSumS,住院天數 > 50
           & 來源別=="E")
```
```{r filter4.1,echo=F}
knitr::kable(filter(DiagSumS,住院天數 > 50& 來源別=="E")%>% select(院區,來源別,住院天數,ends_with("日期")) %>% head())
```

dplyr 子集練習
====================================
type:alert
incremental:true

- 讀入住院疾病統計檔資料
```{r message=F}
# 讀入疾病統計檔資料，請將檔案放在專案路徑下
library(readr)
DiagSumS <- read_csv("DiagSumS.csv") 
```
- 試著用dplyr語法篩選出所有**男性**且**居住地為高雄市**的資料
- 只留下性別、起始字串為“診斷類別”的所有欄位、住院天數、住院日期 五個欄位




計算統計值 summarise() 
====================================
- **資料筆數**、**不重複的歸戶代號數**以及**不重複的來源別數**等
- n(), n_distinct()
```{r summarise1}
summarise(DiagSumS,
          nRecord=n(),
          nID=n_distinct(歸戶代號),
          nSource=n_distinct(來源別))
```

計算統計值 summarise() 
====================================
- 通常會與其他功能合併使用
- 計算**住院超過50天的**的**資料筆數**、**不重複的歸戶代號數**、**平均年齡**以及**性別為男性的資料筆數**
```{r summarise2}
filter1<-filter(DiagSumS,住院天數 > 50)
summarise(filter1,
          nRecord=n(),
          nID=n_distinct(歸戶代號),
          meanAge=mean(年齡),
          nM=sum(性別=="M"))
```

dplyr filter()+summarise() 練習
====================================
type:alert
incremental:true

- 讀入住院疾病統計檔資料
```{r message=F}
# 讀入疾病統計檔資料，請將檔案放在專案路徑下
library(readr)
DiagSumS <- read_csv("DiagSumS.csv") 
```
- 試著用dplyr語法篩選出所有**住院超過30天的**的資料
- 計算這些資料的**來源別為E的數目**，**診斷類別名稱1中包含“腫瘤”文字的資料比數**
- 提示: grepl

pipe %>%
====================================
- 直接用**pipe**符號`%>%`將指令串連，減少暫存物件（filter1）的生成
```{r summarise3}
filter(DiagSumS,住院天數 > 50) %>%
    summarise(nRecord=n(),
          nID=n_distinct(歸戶代號),
          meanAge=mean(年齡),
          nM=sum(性別=="M"))
```

修改欄位名稱 rename()
====================================
`新名稱=舊名稱`
```{r rename1}
DiagSumE <- rename(DiagSumS, Hosp = 院區,Gender=性別)
DiagSumE[1:5,1:2]
```

分組 group_by()
====================================
- 設定分組依據
- 與`summarise()`函式合併使用
- 計算各**性別**（以性別作為分組依據）的**資料比數**、**平均年齡**以及**平均住院天數**
```{r group1,eval=F}
DiagSumE <- rename(DiagSumS, Hosp = 院區,Gender=性別)
group_by(DiagSumE,Gender)%>%
    summarise(nRecord=n(),
        meanAge=mean(年齡),
        meanHos=mean(住院天數))
```
```{r group1.1,echo=F}
group1<-group_by(DiagSumE,Gender)%>%
    summarise(nRecord=n(),
        meanAge=mean(年齡),
        meanHos=mean(住院天數))
knitr::kable(head(group1,4))
```

分組 group_by()
====================================
```{r group1_1,eval=F}
DiagSumE <- rename(DiagSumS, Hosp = 院區,Gender=性別)
group_by(DiagSumE,Gender)%>%
    summarise(nRecord=n(),
        meanAge=mean(年齡),
        meanHos=mean(住院天數))
```
```{r group1_1.1,echo=F}
group1<-group_by(DiagSumE,Gender)%>%
    summarise(nRecord=n(),
        meanAge=mean(年齡),
        meanHos=mean(住院天數))
knitr::kable(head(group1,4))
```

分組 group_by()
====================================
- 可設定**多個**分組依據
- 計算各**院區**各**性別**的**資料比數**、**平均年齡**以及**平均住院天數**
```{r group2,eval=F}
DiagSumE <- rename(DiagSumS, Hosp = 院區,Gender=性別)
group_by(DiagSumE,Hosp,Gender) %>%
    summarise(nRecord=n(),
        meanAge=mean(年齡),
        meanHos=mean(住院天數))
```
```{r group2.1,echo=F}
DiagSumE <- rename(DiagSumS, Hosp = 院區,Gender=性別)
group2<-group_by(DiagSumE,Hosp,Gender) %>%
    summarise(nRecord=n(),
        meanAge=mean(年齡),
        meanHos=mean(住院天數))
knitr::kable(head(group2,3))
```


分組 group_by()
====================================
```{r group2_1,eval=F}
DiagSumE <- rename(DiagSumS, Hosp = 院區,Gender=性別)
group_by(DiagSumE,Hosp,Gender) %>%
    summarise(nRecord=n(),
        meanAge=mean(年齡),
        meanHos=mean(住院天數))
```
```{r group2_1.1,echo=F}
DiagSumE <- rename(DiagSumS, Hosp = 院區,Gender=性別)
group2<-group_by(DiagSumE,Hosp,Gender) %>%
    summarise(nRecord=n(),
        meanAge=mean(年齡),
        meanHos=mean(住院天數))
knitr::kable(head(group2,3))
```

排序 arrange()
====================================
排序功能，預設為**遞增排序**
```{r arrange1,eval=F}
arrange(DiagSumS,住院天數) %>% 
  select(院區,住院天數)
```
```{r arrange1.1,echo=F}
arrange1<-arrange(DiagSumS,住院天數) %>% 
  select(院區,住院天數)
knitr::kable(head(arrange1)) 
```

遞減排序 arrange()
====================================
使用`desc()`將要**遞減排序**的變數包起來，就可以遞減排序
```{r arrange2,eval=F}
arrange(DiagSumS,
        desc(住院天數),
        desc(年齡)) %>% 
  select(院區,住院天數,年齡)
```
```{r arrange2.1,echo=F}
arrange2<-arrange(DiagSumS,
        desc(住院天數),
        desc(年齡))%>% select(院區,住院天數,年齡)
knitr::kable(head(arrange2,6))
```



dplyr綜合範例
====================================
- 結合`group_by()`、`summarise()`、`arrange()`，完成一連串的資料分析
- 計算各**院區**各**性別**的資料數、平均住院天數以及平均年齡，並依平均住院天數**由大到小排序**
```{r arrange3,eval=F}
DiagSumE <- rename(DiagSumS, Hosp = 院區,Gender=性別)
group_by(DiagSumE,Hosp,Gender) %>%
    summarise(nRecord=n(),
        meanAge=mean(年齡),
        meanHos=mean(住院天數)) %>%
  arrange(desc(meanHos))
```
```{r arrange3.1,echo=F}
DiagSumE <- rename(DiagSumS, Hosp = 院區,Gender=性別)
arrange3<-group_by(DiagSumE,Hosp,Gender) %>%
    summarise(nRecord=n(),
        meanAge=mean(年齡),
        meanHos=mean(住院天數)) %>%
  arrange(desc(meanHos))
knitr::kable(head(arrange3,3))
```


dplyr綜合範例
====================================
```{r arrange3_1,eval=F}
DiagSumE <- rename(DiagSumS, Hosp = 院區,Gender=性別)
group_by(DiagSumE,Hosp,Gender) %>%
    summarise(nRecord=n(),
        meanAge=mean(年齡),
        meanHos=mean(住院天數)) %>%
  arrange(desc(meanHos))
```
```{r arrange3_1.1,echo=F}
DiagSumE <- rename(DiagSumS, Hosp = 院區,Gender=性別)
arrange3<-group_by(DiagSumE,Hosp,Gender) %>%
    summarise(nRecord=n(),
        meanAge=mean(年齡),
        meanHos=mean(住院天數)) %>%
  arrange(desc(meanHos))
knitr::kable(head(arrange3))
```

dplyr 綜合練習
====================================
type:alert
incremental:true

- 讀入住院疾病統計檔資料
```{r message=F}
library(readr)
# 讀入疾病統計檔資料，請將檔案放在專案路徑下
DiagSumS <- read_csv("DiagSumS.csv")
```

- 試著用dplyr語法篩選出所有**年齡超過60**的**女性**資料
- 依**院區**，計算**總資料比數**、**來源別為E的資料個數**，**診斷類別名稱1中有腫瘤字樣的資料比數**
- 依總資料比數**由大到小**排序
- 用pipe **%>%**


dplyr 參考文件與資源
====================================
- [Introduction to dplyr](https://cran.rstudio.com/web/packages/dplyr/vignettes/introduction.html)
- DataCamp互動式教學課程 [Data Manipulation in R with dplyr](https://www.datacamp.com/courses/dplyr-data-manipulation-r-tutorial)

其他常用資料處理方法
====================================
資料分組 (數值型態)
```{r}
summary(DiagSumS$年齡)
DiagSumS$AgeGroup<-
  cut(DiagSumS$年齡,
      breaks = c(0,50,65,100),
      labels = c("<=50","50-65",">65"))
```

其他常用資料處理方法
====================================
資料分組 (數值型態)
```{r}
table(DiagSumS$AgeGroup)
```

其他常用資料處理方法
====================================
資料分組 (類別型態)
```{r}
table(DiagSumS$居住地)
```

其他常用資料處理方法
====================================
資料分組 (類別型態)
```{r}
DiagSumS$ResGroup<-""
DiagSumS$ResGroup[
  grepl("台北|基隆|苗栗|桃園|新北市|新竹",
        DiagSumS$居住地)] <- "北"
DiagSumS$ResGroup[
  grepl("台中|雲林|彰化",
        DiagSumS$居住地)] <- "中"
DiagSumS$ResGroup[
  grepl("高雄|嘉義|屏東|台南",
        DiagSumS$居住地)] <- "南"
DiagSumS$ResGroup[
  grepl("臺東|宜蘭",DiagSumS$居住地)] <- "東"
table(DiagSumS$ResGroup)
```

其他常用資料處理方法
====================================
資料分組 (類別型態)
```{r}
table(DiagSumS$ResGroup)
```

其他常用資料處理方法
====================================

診斷碼處理，使用[icd套件](https://cran.r-project.org/web/packages/icd/vignettes/introduction.html)
```{r}
#install.packages("icd")
library(icd)
head(DiagSumS$診斷類別1)
DiagSumS$Diag1Point<-
  icd_short_to_decimal(DiagSumS$診斷類別1)
head(DiagSumS$Diag1Point)
```

其他常用資料處理方法
====================================

診斷碼處理，使用[icd套件](https://cran.r-project.org/web/packages/icd/vignettes/introduction.html)
```{r}
AHRQ<-
  icd10_comorbid_ahrq(
    DiagSumS %>% filter(住院日期>20160101) %>% 
      rename(visit_name=住院號,icd_name=診斷類別1))
head(AHRQ)
```

長表與寬表
====================================
type:sub-section

- 在資料處理的過程中，常因各種需求，需要執行長寬表互換的動作
- tidyr package提供完整的轉換功能
    - 寬表轉長表 `gather(資料/寬表,key=長表標籤欄位名,value=長表數值欄位名,-保留欄位名)`
    - 長表轉寬表 `spread(資料/長表,欄位依據,數值依據)`
    
長表與寬表
====================================
原來的`DiagSumS`資料框中，有診斷類別1~10等欄位 (Column)，屬於寬表
```{r eval=F}
DiagWide<-DiagSumS %>% 
  select(住院號,starts_with("診斷類別"),-contains("名稱")) 
DiagWide%>% head(3)
```
```{r echo=F}
DiagWide<-DiagSumS %>% 
  select(住院號,starts_with("診斷類別"),-contains("名稱")) 

knitr::kable(DiagWide %>% 
  head(3)) 
```

寬表轉長表 gather（）
====================================

- 保留住院號欄位
- 將其他欄位的名稱整合至**診斷類別**欄位，數值整合至**診斷碼**欄位
```{r}
library(tidyr)
DiagLong<-gather(DiagWide,診斷類別,診斷碼,-住院號)
```
```{r eval=F}
head(DiagLong %>% arrange(住院號))
```
```{r echo=F}
knitr::kable(head(DiagLong%>% arrange(住院號))) 
```

長表轉寬表 spread（）
====================================

- `DiagLong`資料框中，剩下住院號，診斷類別，診斷碼等三個欄位 (Column)，屬於長表
- 診斷類別欄位的值轉換為新欄位名稱，並將診斷碼欄位填回新增的欄位

```{r}
DiagWide2<-spread(DiagLong, 診斷類別,診斷碼) 
```
```{r eval=F}
head(DiagWide2)
```
```{r echo=F}
knitr::kable(head(DiagWide2))
```

