R語言基礎+資料載入與前處理
========================================================
author: 長庚資管 曾意儒 Yi-Ju Tseng
date: 2017/07/24
autosize: true
font-family: 'Microsoft JhengHei'
navigation: slide

資料分析步驟
========================================================
- **資料匯入** 
- **資料清洗處理**並轉換為Tidy data
- **資料分析**
- **資料呈現與視覺化**


在分析之前
========================================================
- RStudio怎麼用？
- R基本語法
- R資料結構


RStudio Interface
========================================================
left: 30%
共有四個區塊，分別為：

- 程式碼編輯區 Source editor
- 執行視窗 Console
- 環境/物件
- 檔案/圖表/說明文件

***

```{r echo=FALSE}
knitr::include_graphics("figures/RStudio.png")
```

RStudio 使用步驟
========================================================
- New Project (如果原本沒有的話) **CGMH_R**
- New R Script (如果原本沒有的話) **0724.R**
- 在左上方**程式碼編輯區 Source editor**撰寫程式碼
- 將需要執行的程式碼反白，點選**Run**，或**Ctrl+Enter**，執行程式碼
- 將游標移至需要執行的程式碼，點選**Run** 也可執行該行程式碼
- 程式碼會在左下方Console視窗執行，顯示結果
- 如果有畫圖，會出現在右下方視窗
- 可在右上方視窗檢查所有變數

Console視窗
========================================================
- R是可**直譯**的語言
- 可在執行視窗(左下Console)直接打程式碼
- **>** : 輸入指令
- **+** : 表示前面的程式碼還沒打完
    - 鍵入完整的程式碼
    - **Esc**跳出

R = Base + Other Packages
========================================================
- 安裝套件Package的方法如下：
```{r eval=F}
install.packages("套件名稱")
```

- 套件名稱需要加上雙引號
```{r eval=F}
install.packages("ggplot2")
```

- 載入**已安裝**的套件：
```{r eval=F}
library(ggplot2)
```

- **不用**在套件名稱前後加雙引號


Functions - Basic
========================================================
- 內建Functions函數
- 安裝Packages套件後各套件也會提供多種函數
- 使用方式: `函數名稱(參數1,參數2,....)`
- `?函數名稱` 查詢所需參數與說明
以計算平均數為例，可使用`mean()`函數:
```{r}
##計算1~6的平均數
mean(c(1,2,3,4,5,6)) 
```

Functions - Arguments 順序
========================================================
- 函數的參數設定有順序性
- 不想照順序-->指定參數名稱

如序列產生函數`seq()`，參數順序為`from, to, by`，代表序列起點、序列終點，以及相隔單位。
```{r}
#1~9，每隔2產生一數字
seq(from=1,to=9,by=2)
```

Functions - Arguments 順序
========================================================
```{r}
seq(from=1,to=9,by=2)
#按照順序輸入參數，可省去參數名稱
seq(1,9,2)
#不照順序輸入，需要參數名稱
seq(by=2,to=9,from=1)
```

Variable [<-]
========================================================
- 使用 `<-` 設定變數
- **變數名稱** `<-` **變數內容(值)**
- **變數名稱**可依箭頭方向放置於左側 `<-` 或右側 `->` 
- 但為方便閱讀，**變數名稱**多放置於左側

```{r first}
a<-1 
a
2->b
b
```

Variable 命名規則
========================================================
- 不可使用保留字
    - break, else, FALSE, for, function, if, Inf, NA, NaN, next, repeat, return, TRUE, while等
- 開頭只能是英文字，或 `.`
- 大小寫敏感


資料型態
========================================================
- **數值 (numeric)**
- **字串 (character)**
- **布林變數 (logic)**
- **日期 (Date)**

數值 (numeric)
========================================================
數值包括
- 整數integer（沒有小數點）
```{r num1}
num1<-100 
```
- 浮點數（有小數點）
```{r num2}
num2<-1000.001
```


字串 (character)
========================================================
- 用雙引號`"`框起 : 字串格式
- 數字前後加上雙引號 : 字串格式
    - 無法進行數值的加減乘除
```{r char1}
char1<-"abcTest" 
char2<-"100"
char3<-"200"
#char2+char3 
#會輸出Error message: non-numeric argument to binary operator
```


布林變數 (logic)
========================================================
- 用於邏輯判斷
- 大寫**TRUE**或**T**代表**真**
- 大寫**FALSE**或**F**代表**假**
```{r bool1}
boolT<-TRUE
boolT1<-T
boolF<-FALSE
boolF1<-F
boolT
boolF1
```

日期 (Date)
========================================================
- 表示日期
- `Sys.Date()`可得系統日期

```{r date1}
dateBook<-Sys.Date()
dateBook
```


資料型態包括?
====================================
type:alert


基本運算子: 數學運算
========================================================
數學運算與其他程式語言相同

- 加 `+`
- 減 `-`
```{r math1L}
num1<-1
num2<-100
num1+num2
num1-num2
```
***
- 乘 `*`
- 除 `/`
- 餘數 `%%`
- 次方 `^`
```{r math1r}
num1*num2
num1/num2
```


基本運算子: 邏輯運算
========================================================
常用之邏輯判斷也可在R中直接使用
- 大於 `>`
- 小於 `<`
```{r log1L}
num1<-1
num2<-100
num1>num2
num1<num2
```

***

- 等於 `==`，**雙等號**
- 大於等於 `>=`
- 小於等於 `<=`
```{r log1R}
num1==num2
1==1
```

基本運算子: 邏輯運算
========================================================
文字字串也可比較大小
```{r log2}
char1<-"abcTest" 
char2<-"defTest"
char1>char2
```

基本運算子: 邏輯判斷
========================================================
在R中使用**單符號**即可表示且`&`和或`|`
- 且 `&`

```{r log3l}
TRUE & TRUE
TRUE & FALSE
```

***
在R中使用**單符號**即可表示且`&`和或`|`
- 或 `|`
```{r log3r}
TRUE | TRUE
TRUE | FALSE
```
基本運算子: 反向布林變數 !
========================================================

```{r log4}
!TRUE
!FALSE
```


解讀錯誤訊息
========================================================

- Message：有可能的錯誤通知，程式會繼續執行
- Warning：有錯誤，但是不會影響太多，程式會繼續執行
- Error：有錯，而且無法繼續執行程式
- Condition：可能會發生的情況
```{r}
log(-1)
```
```{r, error=T}
mena(NA)
```

解讀錯誤訊息 範例
========================================================
```
# Error: could not find function "fetch_NBAPlayerStatistics"
# 找不到"fetch_NBAPlayerStatistics" function
```
可能原因：沒安裝或沒讀入SportsAnalytics package


```
# Error in library(knitr): there is no package called 'knitr'
# 找不到"knitr" package
```
可能原因：沒安裝knitr package

Help
========================================================
- R語言與套件均有完整的文件與範例可以參考
- 輸入`?函數名稱`或`?套件名稱`
```{r eval=F}
?ggplot2
?ymd
```

- Google
- [Stack Overflow](http://stackoverflow.com/)也有許多問答


R 常見的資料結構
========================================================
- **向量** Vector
- **因子** Factor
- 列表 List
- 矩陣 Matrix
- **資料框** data.frame
- 屬性查詢函數 **str()**

向量 Vector
========================================================
type:sub-section
- 一維資料
- 所有元素之**資料型態必須相同**
- `c()`函數 定義向量
```{r vector1}
vec<-c('a','b','c','d','e')
```

- a~e: **元素(element)**
- 順序固定
    - `a`: 第**1**個元素
    - `b`: 第**2**個元素

向量 Vector 取值
========================================================  

若要將`vec`向量的第**4**個元素取出，可使用**向量名稱[元素位置]**: 
```{r vector2}
vec[4] ## 第4個元素
```
也可同時取出多個元素
```{r vector21}
vec[c(2,3)] ## 第2與第3個元素
```


向量 Vector 元素設定
========================================================   
```{r vector22}
vec[3]
vec[3]<-'z' ##第三個元素值設定為“z”
vec[3] 
```

產生向量函數
========================================================   

若要產生連續向量，如1~20，可使用`:`來串連首字與最後一字
```{r vector3}
1:20 ## c(1,2,...,19,20)
```

向量取值練習
====================================
type:alert
incremental:true

- 新增一向量a，包含數字1到10
- 新增一向量b，包含數字1到20中的所有偶數
- 取出a向量的第4個元素
- 取出b向量的第5,6,7個元素


向量運算
========================================================  
向量也可直接做加減乘除運算，如
```{r vector5}
numvec<-1:10 ## c(1,2,3,4,5,6,7,8,9,10)
numvec+3 ## 所有元素+3
numvec*2 ## 所有元素*2
```

向量運算
========================================================  
向量和向量也可做運算，如
```{r vector6}
numvec1<-1:3 ## c(1,2,3)
numvec2<-4:6 ## c(4,5,6)
numvec1+numvec2
numvec1*numvec2
```

向量運算練習
====================================
type:alert
incremental:true

- 新增一向量a，包含數字1到10
- 新增一向量b，包含數字1到10中的所有偶數
- a+b=?

因子 factor
========================================================
type:sub-section
- 由向量轉換而成
- 表示**類別**數據
- 使用方法為`factor(資料向量,levels=類別次序)`
```{r factor1}
factor(c("門診","住院","急診"),
       levels = c("門診","住院","急診"))
```
因子變量一但決定其類別的種類與數目時，通常不會再作更動，也就是任何新增的元素都要門診、住院、急診其中一種。


資料框 data.frame
======================================================== 
type:sub-section
- 二維資料格式 (像Excel試算表)
- 由欄位（Column）和列（Row）組成
- 使用`data.frame()`來創建新的資料框
```{r dataframe1}
##欄位名稱=欄位值
StuDF <- data.frame(StuID=c(1,2,3), 
                  name=c("小明","大雄","胖虎"),
                  score=c(80,60,90))
StuDF 
```


資料框 data.frame
======================================================== 
- 每列：觀察值 / 每欄：變數
- 欄位需有名稱
    - StuID, name, score
    - 若沒有設定，自動指派V1~Vn
- 欄位的資料型態相同
- 每一列有列名
    - 依序指派1~n作為列名


資料框 data.frame
======================================================== 

```{r}
colnames(StuDF) #檢查欄位名稱
rownames(StuDF) #檢查列名
nrow(StuDF) #幾列
ncol(StuDF) #幾欄
```

資料框 data.frame
======================================================== 
如需檢查個欄位之資料型別，可使用`str()`函數

**解釋iris資料框**???

```{r}
str(iris) 
```

資料框資料擷取
======================================================== 
資料框可用`$`符號做**欄位**資料擷取
```{r}
#取得iris資料框中的Species欄位的第1,11,21,31個值
iris$Species[c(1,11,21,31)] 
```

資料框資料編輯
======================================================== 
資料框可用`$`符號做**欄位**資料擷取後，當成向量，並使用**[ ]**做資料編輯。
```{r}
iris$Species[2]<-"versicolor"
iris$Species[1:4]
```

資料框資料編輯練習
====================================
type:alert
incremental:true

- iris$Time<-1 會發生什麼事情?



資料分析步驟
========================================================
- **資料匯入** 
- 資料清洗處理並轉換為Tidy data
- 資料分析
- 資料呈現與視覺化


資料匯入
====================================
- 從檔案匯入
- 資料匯出

從檔案匯入
====================================
type:section
- Import Dataset功能 (RStudio)
- R物件 .rds
- R程式 .R

Import Dataset功能 (RStudio)
====================================
選取RStudio四分割視窗右上角的Environment標籤，選擇**Import Dataset**

```{r echo=FALSE}
knitr::include_graphics("figures/import.png")
```

Import Dataset功能 (RStudio)
====================================
- 選取`From CSV`
- 點選`Browse`按鈕開啟檔案選取器

```{r echo=FALSE}
knitr::include_graphics("figures/csv.png")
```

Import Dataset功能 (RStudio)
====================================
- 利用下方`Import Options`的選項微調參數
    - `Delimiter`分隔符號
    - `First Row as Names`首列是否為欄位名稱
    
```{r echo=FALSE}
knitr::include_graphics("figures/csv2.png")
```

Import Dataset功能 (RStudio)
====================================
type:alert
incremental:true

- 操作**範例檔案**，Basic.csv
- 若匯入的檔案為**tab分隔文字檔**? 該如何調整參數？

R物件 .rds
====================================
type:sub-section
如果在R程式內處理完資料後，必須儲存一份以供後續分析，使用R物件儲存是最佳的方式

- 檔案小
- 讀取快速
- 推薦使用`readRDS()`函數讀取RDS檔案
- [A better way of saving and loading objects in R](http://www.fromthebottomoftheheap.net/2012/04/01/saving-and-loading-r-objects/)
```{r eval=F}
dataset <- readRDS("檔案路徑與名稱")
```


資料匯出
====================================
type:section
- 文字檔 .txt
- CSV檔 .csv
- R物件 .rds


CSV檔 .csv
====================================
```{r eval=FALSE}
write.csv(iris,file="iris.csv",row.names = F)
```
- 要匯出的資料
- `file` 檔案名稱
- `append` T/F T:在檔案後加字，F:直接覆蓋檔案 (預設F)
- `quote` 是否需要用雙引號將字串包起 (預設T)
- `row.names` T/F 是否需要輸出row names
- `col.names` T/F 是否需要輸出column names
- `fileEncoding` 編碼設定



R物件 .rds
====================================

若是要在R的環境繼續使用，建議匯出成R物件檔案(.rds)
```{r eval=FALSE}
saveRDS(iris,"iris.rds")
```

資料分析步驟
========================================================
- 資料匯入
- **資料清洗處理**並轉換為Tidy data
- 資料分析
- 資料呈現與視覺化


資料清洗與處理
====================================
- Tidy Data
- 資料型別轉換處理
- 文字字串處理
- 子集Subset
- 排序
- 資料組合
- 長表與寬表

Tidy Data
====================================
type:sub-section 

Each column is a variable. Each row is an observation.

- 一個欄位（Column）內只有一個數值，最好要有凡人看得懂的Column Name
- 不同的觀察值應該要在不同行（Row）
- 一張表裡面，有所有分析需要的資料
- 如果一定要多張表，中間一定要有index可以把表串起來
- One file, one table



資料型別轉換處理
====================================
type:sub-section 
包括**資料型別檢查**與**資料型別轉換**

資料型別:

- 數值 (numeric)
- 字串 (character)
- 布林變數 (logic)
- 日期 (Date)


資料型別檢查 - is.
====================================
使用`is.`函數檢查資料型別，回傳布林變數，若為**真**，回傳**TRUE**

- 是否為**數字** `is.numeric(變數名稱)`
- 是否為**文字** `is.character(變數名稱)`
- 是否為**布林變數** `is.logical(變數名稱)`

```{r message=F}
library(readr)
EMDiagS <- read_csv("EMDiagS.csv") #自行載入
is.numeric(EMDiagS$疾病序號)
is.character(EMDiagS$疾病序號)
```

資料型別檢查 - class()
====================================
使用`class(變數名稱)`函數，直接回傳**資料型別**
```{r}
class(EMDiagS$疾病序號)
class(Sys.Date())
```


資料型別轉換 - as.
====================================

使用`as.`函數轉換型別

- 轉換為**數字** `as.numeric(變數名稱)`
- 轉換為**文字** `as.character(變數名稱)`
- 轉換為**布林變數** `as.logical(變數名稱)`

```{r}
cha<-"100"
as.numeric(cha)
```

資料型別轉換 - as.
====================================

若無法順利完成轉換，會回傳空值`NA`，並出現警告訊息
```{r}
as.numeric("abc")
```



資料型別轉換練習
====================================
type:alert
incremental:true

資料年月是整數型別 (integer)，該如何將這此欄位轉成文字呢？
```{r}
library(readr)
EMDiagS <- read_csv("EMDiagS.csv") #自行載入
str(EMDiagS)
```


日期 (Date) - lubridate
========================================================
- `lubridate` package : 日期與字串的相關轉換操作
- `ymd()`函數 : 將`年/月/日`格式的文字轉換為日期物件
    - y表年year
    - m表月month
    - d表日day
```{r date2,message=F}
#install.packages("lubridate") 第一次使用需安裝
library(lubridate)
ymd('2012/3/3')
```


日期 (Date) - lubridate
========================================================
- `mdy()`函數 : 將`月/日/年`格式的文字轉換為日期物件
    - y表年year
    - m表月month
    - d表日day
- 以此類推

```{r date3,message=F}
mdy('3/3/2012')
```

- 其他使用方法：[The Yhat Blog](http://blog.yhat.com/static/pdf/R_date_cheat_sheet.pdf)


資料型別轉換練習
====================================
type:alert
incremental:true

輸入日期是整數型別 (integer)，該如何將這此欄位轉成日期呢？
```{r}
library(readr)
EMDiagS <- read_csv("EMDiagS.csv") #自行載入
str(EMDiagS)
```


文字字串處理
====================================
type:sub-section 

- 基本處理
- 搜尋字串
- [Regular Expression 正規表示式 @ R](https://github.com/CGUIM-BigDataAnalysis/BigDataCGUIM/blob/master/105/RegularExpression.md)

基本處理
====================================

- 切割 `strsplit()` **Split**
- 子集 `substr()` **sub string**
- 大小寫轉換 `toupper()` `tolower()`
- 兩文字連接 `paste()` `paste0()`
- 文字取代 `gsub()` **substitute**
- 前後空白去除 `str_trim()` 需安裝`stringr` package **trim**

基本處理-切割
====================================
strsplit (欲切割的字串,用什麼符號切割)
```{r}
strsplit ("Hello World"," ")
```

基本處理-切割（多字元）|
====================================
strsplit (欲切割的字串,切割符號1|切割符號2|...)
```{r}
strsplit ("Hello World"," |o")
```

基本處理-子集（切一小段）
====================================
substr(欲做子集的字串,開始位置,結束位置)
```{r}
substr("Hello World", start=2,stop=4)
```

基本處理-大小寫轉換
====================================
```{r}
toupper("Hello World")
tolower("Hello World")
```

基本處理-兩文字連接
====================================
paste(欲連接的字串1, 欲連接的字串2, 欲連接的字串3,.... sep=中間用什麼符號分隔)
```{r}
paste("Hello", "World")
paste("Hello", "World", sep='')
paste0("Hello", "World")
```

基本處理-文字取代
====================================
gsub(想要換掉的舊字串,想要換成的新字串,欲作取代的完整字串)
```{r}
gsub("o","0","Hello World")
```

基本處理-文字取代（多字元）|
====================================
gsub(想要換掉的舊字串1|想要換掉的舊字串2|...,想要換成的新字串,欲作取代的完整字串)
```{r}
gsub("o|l","0","Hello World")
```

基本處理-前後空白去除
====================================
str_trim要使用前需要安裝與載入**stringr**套件
```{r}
library(stringr)
str_trim(" Hello World ")
```


搜尋字串
====================================
- 通常使用在**比對文字向量**
- **有分大小寫**
- 依照回傳值的型態不同，有兩種常用函數
    - 回傳符合條件之向量位置(index) `grep(搜尋條件,要搜尋的向量)`
    - 回傳每個向量是否符合條件(TRUE or FALSE) `grepl(搜尋條件,要搜尋的向量)`

```{r}
##在姓名文字向量中尋找A，回傳包含"A"之元素位置
grep("A",c("Alex","Tom","Amy","Joy","Emma")) 
```

搜尋字串 - grepl()
====================================
```{r}
##在姓名文字向量中尋找A，回傳各元素是否包含"A"
grepl("A",c("Alex","Tom","Amy","Joy","Emma")) 
##在姓名文字向量中尋找a，回傳各元素是否包含"a"
grepl("a",c("Alex","Tom","Amy","Joy","Emma")) 
```

搜尋字串 - grep()
====================================
```{r}
##在姓名文字向量中尋找A，回傳包含"A"的元素位置
grep("A",c("Alex","Tom","Amy","Joy","Emma")) 
##在姓名文字向量中尋找a，回傳包含"a"的元素位置
grep("a",c("Alex","Tom","Amy","Joy","Emma")) 
```

搜尋字串 - grep()
====================================
type:alert
多字元？

搜尋字串 - grep()
====================================
type:alert
- 搜尋所有疾病碼中，包含250的資料
```{r message=F}
library(readr)
EMDiagS <- read_csv("EMDiagS.csv") #自行載入
```


子集Subset - 一維資料
====================================
type:sub-section 

之前有介紹使用`[ ]`取出單一或多個元素的方法
```{r}
##R語言內建資料之一
letters 
##取出letters向量的第一個元素
letters[1] 
```

子集Subset - 一維資料
====================================

也可以用“負號”去掉不要的資料
```{r}
##取出letters向量的第1,3,5個元素
letters[c(1,3,5)] 
##取出letters向量除了第1,3,5個元素之外的所有元素
letters[c(-1,-3,-5)] 
```

子集Subset - 一維資料
====================================
若想要快速取得一向量的開頭與結尾元素，可使用`head()`和`tail()`函數
```{r}
##取出letters向量的前五個元素
head(letters,5) 
##取出letters向量的後三個元素
tail(letters,3) 
```

子集Subset - 二維資料
====================================
type:sub-section 
- 可針對列(Row)和行(Column)做子集
- 使用`[ ]`，但因應二維資料的需求，以`,`分隔列與行的篩選條件
- 資料篩選原則為**前Row,後Column**，**前列,後行**
- 若不想篩選列，則在`,`前方保持**空白**即可。
- 篩選方式可輸入**位置(index)**、**欄位名稱**或輸入**布林變數(TRUE/FALSE)**
    - 輸入位置: `dataFrame[row index,column index]`
    - 輸入布林變數: `dataFrame[c(T,F,T),c(T,F,T)]`
    - 輸入欄位名稱: `dataFrame[row name,column name]`

子集Subset - 二維資料 []
====================================
```{r}
##第一列Row，第二行Column
iris[1,2] 
```
```{r eval=F}
##第1~3列Row，所有的行Column
iris[1:3,] 
```
```{r echo=F}
##第1~3列Row，所有的行Column
knitr::kable(iris[1:3,]) 
```

子集Subset - 二維資料 []
====================================
```{r eval=F}
##第1~10列Row，第1,3,5行Column (TRUE)
iris[1:10,c(T,F,T,F,T)] 
```
```{r echo=F}
knitr::kable(iris[1:10,c(T,F,T,F,T)]) ##第1~10列Row，第1,3,5行Column (TRUE)
```

子集Subset - 二維資料 []
====================================
```{r}
##所有的列Row，名稱為Species的行Column
iris[,"Species"] 
```

子集 [ ] 練習
====================================
type:alert
incremental:true

- 取出iris資料集"Species"欄位的前十列(Row)
- 取出iris資料集所有單數列(Row)
- 取出iris資料集最後兩個欄位的所有偶數列(Row)

子集Subset - 二維資料 $
====================================
也可使用`$`符號做**Column的篩選**
```{r}
# 等同於iris[,"Species"]
##所有的列Row，名稱為Species的行Column
iris$Species 
```


子集Subset - 二維資料grepl()
====================================
**Row的篩選**也可搭配字串搜尋函數`grepl()`
```{r eval=F}
grepl("color",iris$Species)
##Species包含"color"的列，所有的行
iris[grepl("color",iris$Species),] 
```
```{r echo=F}
head(grepl("color",iris$Species))
knitr::kable(head(iris[grepl("color",iris$Species),]))
```

子集Subset - head()
====================================

若想要快速取得資料框的前幾列(Row)或後幾列，也可使用`head()`和`tail()`函數
```{r eval=F}
 ##取出iris資料框的前五列
head(iris,5)
```
```{r echo=F}
knitr::kable(head(iris,5)) 
```

子集Subset - tail()
====================================

若想要快速取得資料框的前幾列(Row)或後幾列，也可使用`head()`和`tail()`函數
```{r eval=F}
##取出iris資料框的後三列
tail(iris,3) 
```
```{r echo=F}
knitr::kable(tail(iris,3))
```


子集綜合練習
====================================
type:alert
incremental:true

- 取出急診診斷資料中，所有疾病碼等於25000的診斷資料
    - [ ]
- 取出內建資料集mtcars中，所有疾病碼為250開頭的診斷資料
    - grepl()
    - [ ]

```{r}
library(readr)
EMDiagS <- read_csv("EMDiagS.csv") #自行載入
str(EMDiagS)
```



資料組合
====================================
type:sub-section

有時需要在資料框新增一列，或新增一行

- Row 列的組合 `rbind()`
- Column 行的組合 `cbind()`

`rbind()`和`cbind()`的參數可以是向量，也可以是資料框

資料組合 - rbind()
====================================

使用向量做資料整合範例:
```{r}
rbind(c(1,2,3), #第一列
      c(4,5,6)  #第二列
      ) 
```

資料組合 - rbind()
====================================

使用資料框與向量做資料整合範例:
```{r warning=F}
irisAdd<-rbind(iris, #資料框
      c(1,1,1,1,"versicolor")  #新增一列
      ) 
```
```{r eval=F}
tail(irisAdd,2)
```
```{r echo=F}
knitr::kable(tail(irisAdd,2)) 
```

資料組合 - cbind()
====================================

使用向量做資料整合範例:
```{r}
cbind(c(1,2,3), #第一行
      c(4,5,6)  #第二行
      ) 
```

資料組合 - cbind()
====================================

使用資料框與向量做資料整合範例:
```{r warning=F}
irisAdd<-cbind(iris, #資料框
      rep("Add",nrow(iris))  #新增一行
      ) 
```
```{r eval=F}
tail(irisAdd,1)
```
```{r echo=F}
knitr::kable(tail(irisAdd,1)) 
```

    
資料結合 (Join)
====================================

除了按照行列順序的組合外，更常有的情形是依照某個欄位的值作為結合依據，如：

- 用歸戶代號把以下兩個資料框結合成一個資料框
    - 門診診斷資料框
    - 病人基本資料資料框

資料結合 (Join)
====================================
原生的R環境可以用`merge()`函數將資料框結合，使用方法為`merge(資料框1,資料框2,by="結合依據欄位")`

```{r}
BasicS <- read_csv("BasicS.csv")
EMDiagS <- read_csv("EMDiagS.csv")
```

資料結合 (Join)
====================================
```{r, eval=F}
head(BasicS)
```
```{r, echo=F}
knitr::kable(head(BasicS))
```

資料結合 (Join)
====================================
```{r, eval=F}
head(EMDiagS)
```
```{r, echo=F}
knitr::kable(head(EMDiagS))
```

資料結合 (Join) 更有效率的做法
====================================

`dplyr`套件提供更有效率的資料結合方法，包括:

- inner_join()：保留有對應到的資料
- left_join()：保留左邊資料框的所有資料
- right_join()：保留右邊資料框的所有資料
- full_join()：保留所有資料
- semi_join()
- anti_join()

資料結合 - inner_join()
====================================
只保留兩張表都有的列
使用方法 `inner_join(x, y, by = )`

```{r}
#install.packages("dplyr") 第一次使用先安裝
library(dplyr)
inner_join(BasicS,EMDiagS,by="歸戶代號")
```

資料結合 - left_join()
====================================
保留左邊的表所有的列
使用方法 `left_join(x, y, by = )`

```{r}
library(dplyr)
left_join(BasicS,EMDiagS,by="歸戶代號")
```

資料結合 - right_join()
====================================
保留右邊的表所有的列
使用方法 `right_join(x, y, by = )`

```{r}
library(dplyr)
right_join(BasicS,EMDiagS,by="歸戶代號")
```

資料結合 - full_join()
====================================
保留所有的列
使用方法 `full_join(x, y, by = )`

```{r}
library(dplyr)
full_join(BasicS,EMDiagS,by="歸戶代號")
```

資料結合 - semi_join()
====================================
留下左邊的ID也有出現在右邊的表的列，右表資料不會輸出
使用方法 `semi_join(x, y, by = )`

```{r}
library(dplyr)
semi_join(BasicS,EMDiagS,by="歸戶代號")
```

資料結合練習
====================================
type:alert

- 讀入門診診斷檔OptDiagS.csv
- 讀入門診醫囑檔OptOrderS.csv
- 依照**歸戶代號**以及**門診號**，將兩張表格結合，只留下有對應到的資料
  - 提示: by=c()
- 請問結合後的資料有幾列？



遺漏值處理
====================================
type:sub-section

- 遺漏值(Missing Value)常常出現在真實資料內，在數值運算時常會有問題
- 最簡單的方法是將有缺值的資料移除

遺漏值處理 is.na()
====================================
如資料為向量，可使用`is.na()`來判斷資料是否為空值`NA`，若為真`TRUE`，則將資料移除。
```{r}
naVec<-c("a","b",NA,"d","e")
is.na(naVec)
naVec[!is.na(naVec)] ##保留所有在is.na()檢查回傳FALSE的元素
```



遺漏值處理 complete.cases()
====================================
若資料型態為資料框，可使用`complete.cases`來選出完整的資料列
```{r eval=F}
head(airquality,5)
```
```{r echo=F}
knitr::kable(head(airquality,5))
```
```{r}
complete.cases(airquality) 
```

遺漏值處理 complete.cases()
====================================
若資料型態為資料框，可使用`complete.cases`來選出完整的資料列，如果資料列(row)是完整的，則會回傳**TRUE**

```{r eval=F}
##保留所有在complete.cases()檢查回傳TRUE的元素
head(airquality[complete.cases(airquality),]) 
```
```{r echo=F}
knitr::kable(head(airquality[complete.cases(airquality),]))
```
