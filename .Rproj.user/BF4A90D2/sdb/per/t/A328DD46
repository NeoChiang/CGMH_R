{
    "collab_server" : "",
    "contents" : "探索式資料分析\n========================================================\nauthor: 曾意儒 Yi-Ju Tseng\ndate: 2017/07/31\nautosize: true\nfont-family: 'Microsoft JhengHei'\nnavigation: slide\n\n\n資料分析步驟\n========================================================\n- 資料匯入\n- 資料清洗處理並轉換為Tidy data\n- **資料分析**\n- 資料呈現與視覺化\n\n\n資料分析大綱\n====================================\ntype:sub-section \n\n- 什麼是探索式資料分析\n- 量化的分析方式\n- dplyr\n\n什麼是探索式資料分析\n====================================\ntype:sub-section \n\n- 探索式資料分析 (**E**xploratory **D**ata **A**nalysis)\n- 在資料量 大/雜/髒 的時候，探索式資料分析非常重要\n- 運用**視覺化**、**基本的統計**等工具，反覆的探索**資料特性**，獲取資料所包含的資訊、結構和特點\n- 在進行複雜或嚴謹的分析之前，必須要對資料有更多認識，才能訂定**對的資料分析方向**\n- 通常**不需要**嚴謹的假設和細節呈現\n\n\n探索式資料分析\n====================================\n- 分析各變數間的**關聯性**，看是否有預料之外的有趣發現\n- 觀察資料內容是否符合預期，若否，檢查資料**是否有誤**\n- 檢查資料是否符合分析前的假設\n\n透過探索性分析來**調整分析的方向**，減少因分析方向錯誤所造成的時間浪費。\n\n探索式資料分析\n====================================\n\n- 圖形化Graphical\n    - 單變量Univariate\n    - 雙變量Bivariate\n    - 多變量Multivariate\n    \n- 量化Quantitative\n    - 單變量Univariate\n    - 雙變量Bivariate\n    - 多變量Multivariate\n\n圖形化的分析\n====================================\n包括做圖與列表，將會在下章節介紹，本章節著重於量化的分析方式。\n\n\n量化的分析方式: 單變量\n====================================\n資料初步統計，量化的分析方式可包含\n\n- 計算集中趨勢\n    - 平均值 Mean `mean()`\n    - 中位數 Median `median()`\n    - 眾數 Mode，R無內建函數，可直接用`table()`找出現次數最多的資料\n    \n量化的分析方式: 單變量-集中趨勢\n====================================\n```{r}\nmean(iris$Sepal.Length)\nmedian(iris$Sepal.Length)\ntable(iris$Species)\n```\n    \n量化的分析方式: 單變量\n====================================\n資料初步統計，量化的分析方式可包含\n\n- 計算資料分散程度\n    - 最小值 Min `min()`\n    - 最大值 Max `max()`\n    - 範圍 Range `range()`\n    - 四分位差 Quartiles `quantile()`\n    - 變異數 Variance `var()`\n    - 標準差 Standard deviation `sd()`\n    \n量化的分析方式: 單變量-分散程度\n====================================\n```{r}\nmin(iris$Sepal.Length)\nmax(iris$Sepal.Length)\nrange(iris$Sepal.Length)\n```\n\n量化的分析方式: 單變量\n====================================\n```{r}\nquantile(iris$Sepal.Length)\nvar(iris$Sepal.Length)\nsd(iris$Sepal.Length)\n```\n\n\n量化的分析方式: 雙變量\n====================================\n- 列聯表 Crosstabs `table()`, `prop.table()`\n- 相關性 Correlation `cor()`\n\n量化的分析方式: 雙變量-列聯表\n====================================\n輪子的數目與自手排的關係\n```{r}\ntable(mtcars$cyl,mtcars$am)\n```\n\n量化的分析方式: 雙變量-相關性\n====================================\n油耗跟馬力的關聯性（相關係數）\n```{r}\ncor(mtcars$mpg,mtcars$hp)\n```\n\n量化的分析方式 w/ R\n====================================\n- 大多可用R的內建函數完成計算\n- 但是在探索式分析時，常常需要**資料分組**\n    - 觀察**男性**和**女性**的血壓差異\n    - **A隊**與**B隊**的三分球命中率差異\n    - **中鋒**和**後衛**的助攻次數\n    - ...等\n- 若只用基本的內建函數計算，相當耗時\n    - `data.table`和`dplyr` packages可以快速完成**分組分析**!\n\ndata.table 參考文件與資源\n====================================\n- [官網](https://github.com/Rdatatable/data.table/wiki)\n- 指令全集[The data.table R package cheat sheet](https://s3.amazonaws.com/assets.datacamp.com/img/blog/data+table+cheat+sheet.pdf)\n- [A data.table R tutorial by DataCamp](https://www.datacamp.com/community/tutorials/data-table-r-tutorial#gs.vzMYa_k)\n- DataCamp [互動式教學課程](https://www.datacamp.com/courses/data-table-data-manipulation-r-tutorial)\n\n\ndplyr\n====================================\ntype:sub-section \n\n- [Hadley Wickham](http://hadley.nz/)開發\n- 使用以下函數分析整理資料：\n    - `select()`: 選要分析的欄位，欄位子集 (Column)\n    - `filter()`: 選要分析的觀察值，觀察值子集 (Row)\n    - `mutate()`: 增加新欄位\n    - `summarise()`: 計算統計值\n\ndplyr\n====================================\ntype:sub-section \n\n- 使用以下函數分析整理資料：\n    - `group_by()`: 分組依據\n    - `arrange()`: 觀察值排序\n    - `rename()`: 欄位重新命名\n    - `%>%`: the “pipe” operator 連結上數函式，將所有函式計算串在一起執行\n\ndplyr\n====================================\n\n如要使用必須安裝並載入`dplyr` package\n```{r eval=F}\ninstall.packages(\"dplyr\") ##安裝\n```\n```{r message=F}\nlibrary(dplyr) ##載入\n```\n\n以上述NBA資料為例，首先先讀入資料\n```{r}\nlibrary(SportsAnalytics)\nNBA1516<-fetch_NBAPlayerStatistics(\"15-16\")\n```\n\n欄位(Column)子集 select() \n====================================\n- 針對欄位 (Column)做子集\n- `select(資料名稱,欄位條件1,欄位條件2,...)`\n- 條件1與條件2是使用**或**的連結概念\n\n\n欄位(Column)子集 select() \n====================================\n- `dplyr`提供幾個方便篩選名稱的函式：\n    - `starts_with()`\n    - `ends_with()`\n    - `contains()`\n    - `matches()`: matches a regular expression\n    - `num_range()`: num_range(\"x\", 8:11).\n    - `one_of()`: variables in character vector\n    - `everything()`\n\n詳細說明可在R執行視窗中輸入`?select_helpers`查看。\n\n欄位(Column)子集 select() \n====================================\n篩選欄位名稱為`Name`、開頭是`Threes`或是開頭是`FieldGoals`的欄位\n```{r select1,eval=F}\n##等於NBA1516[,c(\"Name\",\"ThreesMade\",\"ThreesAttempted\",\n##   \"FieldGoalsMade\",\"FieldGoalsAttempted\")]\nselect1<-\n    select(NBA1516,Name,starts_with(\"Threes\"),\n            starts_with(\"FieldGoals\"))\nhead(select1)\n```\n```{r select1.1,echo=F}\nselect1<-select(NBA1516,Name,starts_with(\"Threes\"),\n                starts_with(\"FieldGoals\"))\nknitr::kable(head(select1,1)) \n```\n\n欄位(Column)子集 select() \n====================================\n\n若想篩選欄位`Name`到欄位`FieldGoalsMade`間的所有欄位，但不想要`GamesPlayed`欄位\n- 用`:`串連欄位名稱\n- 用`-`去除不要的欄位\n```{r selec3,eval=F}\n##等同於NBA1516[,c(2:4,612)]\nselect3<-\n    select(NBA1516,Name:FieldGoalsMade,-GamesPlayed)\nhead(select3,3)\n```\n```{r selec3.1,echo=F}\nselect3<-select(NBA1516,Name:FieldGoalsMade,-GamesPlayed)\nknitr::kable(head(select3,3))\n```\n\n觀察值(Row)子集 filter()\n====================================\n- 是針對列 (Row)做子集\n- `filter(資料名稱,篩選條件1,篩選條件2)`篩選條件們是用**且**的邏輯串連\n- **出場分鐘數超過2850分鐘**的球員資料，可輸入下列指令\n```{r filter1,eval=F}\n##等於NBA1516[NBA1516$TotalMinutesPlayed>2850,]\nfilter(NBA1516,TotalMinutesPlayed>2850)\n```\n```{r filter1.1,echo=F}\n##等同於 NBA1516[NBA1516$TotalMinutesPlayed>2850,]\nfilter1<-filter(NBA1516,TotalMinutesPlayed>2850)\nknitr::kable(filter1)\n```\n\n觀察值(Row)子集 filter()\n====================================\n也可選擇隊伍名稱為\"BOS\"或\"SAN\"的球員資料\n```{r filter2,eval=F}\n##等於NBA1516[NBA1516$Team %in% c(\"BOS\",\"SAN\"),]\nfilter(NBA1516,Team %in% c(\"BOS\",\"SAN\"))\n```\n```{r filter2.1,echo=F}\nknitr::kable(head(filter(NBA1516,Team %in% c(\"BOS\",\"SAN\"))))\n```\n\n\n觀察值(Row)子集 filter()\n====================================\n也可使用 `&` 和 `|`等符號串連邏輯\n```{r filter4,eval=F}\nfilter(NBA1516,\n       FieldGoalsMade/FieldGoalsAttempted>0.7\n           &GamesPlayed>30)\n```\n```{r filter4.1,echo=F}\nknitr::kable(filter(NBA1516,FieldGoalsMade/FieldGoalsAttempted>0.7 & GamesPlayed>30))\n```\n\ndplyr 子集練習\n====================================\ntype:alert\nincremental:true\n\n- 讀入NBA資料\n```{r,eval=F}\nlibrary(SportsAnalytics)\nlibrary(dplyr)\nNBA1516<-fetch_NBAPlayerStatistics(\"15-16\")\n```\n- 試著用dplyr語法篩選出所有**助攻數(Assists)超過100**且**抄截數大於20**的球員資料\n- 只留下Name Team Position GamesPlayed TotalMinutesPlayed Assists Steals 七個欄位\n\n\n\n增加新欄位 mutate()\n====================================\n- 新增新欄位`FGRate`，欄位值為`FieldGoalsMade/FieldGoalsAttempted`\n```{r mutate1}\nmutate1<-\n    mutate(NBA1516,\n           FGRate=FieldGoalsMade/FieldGoalsAttempted)\nmutate1$FGRate[1:5]\n```\n\n計算統計值 summarise() \n====================================\n- **球員個數**、**不重複的隊伍數**以及**不重複的守備位置數**等\n- n(), n_distinct()\n```{r summarise1}\nsummarise(NBA1516,\n          nPlayer=n(),\n          nTeam=n_distinct(Team),\n          nPos=n_distinct(Position))\n```\n\n計算統計值 summarise() \n====================================\n- 通常會與其他功能合併使用\n- 計算**出場分鐘數大於2500分鐘**的**球員個數**、**平均投進的兩分球數**以及**平均投出的兩分球數**\n```{r summarise2}\nfilter1<-filter(NBA1516,TotalMinutesPlayed>2500)\nsummarise(filter1,\n          nPlayer=n(),\n          meanFGMade=mean(FieldGoalsMade),\n          meanFGAtt=mean(FieldGoalsAttempted))\n```\n\ndplyr filter()+summarise() 練習\n====================================\ntype:alert\nincremental:true\n\n- 讀入NBA資料\n```{r eval=F}\nlibrary(SportsAnalytics)\nlibrary(dplyr)\nNBA1516<-fetch_NBAPlayerStatistics(\"15-16\")\n```\n- 試著用dplyr語法篩選出所有**助攻數(Assists)超過100**且**抄截數大於20**的球員資料\n- 計算這些球員的**平均出場數GamesPlayed**，**平均出場分鐘數TotalMinutesPlayed**\n\npipe %>%\n====================================\n- 直接用**pipe**符號`%>%`將指令串連，減少暫存物件（filter1）的生成\n```{r summarise3}\nfilter(NBA1516,TotalMinutesPlayed>2500) %>%\n    summarise(nPlayer=n(),\n        meanFGMade=mean(FieldGoalsMade),\n        meanFGAtt=mean(FieldGoalsAttempted))\n```\n\n分組 group_by()\n====================================\n- 設定分組依據\n- 與`summarise()`函式合併使用\n- 計算各**隊**（以Team作為分組依據）的**球員數**、**平均投進的兩分球數**以及**平均投出的兩分球數**\n```{r group1,eval=F}\ngroup_by(NBA1516,Team)%>%\n    summarise(nPlayer=n(),\n        meanFGMade=mean(FieldGoalsMade),\n        meanFGAtt=mean(FieldGoalsAttempted))\n```\n```{r group1.1,echo=F}\ngroup1<-group_by(NBA1516,Team)%>%\n  summarise(nPlayer=n(),meanFGMade=mean(FieldGoalsMade),\n                meanFGAtt=mean(FieldGoalsAttempted))\nknitr::kable(head(group1,4))\n```\n\n分組 group_by()\n====================================\n- 可設定**多個**分組依據\n- 計算各**隊**各**守備位置**（以Team和Position作為分組依據）的**球員數**、**平均投進的兩分球數**以及**平均投出的兩分球數**\n```{r group2,eval=F}\ngroup_by(NBA1516,Team,Position)%>%\n  summarise(nPlayer=n(),\n        meanFGMade=mean(FieldGoalsMade),\n        meanFGAtt=mean(FieldGoalsAttempted))\n```\n```{r group2.1,echo=F}\ngroup2<-group_by(NBA1516,Team,Position)%>%\n  summarise(nPlayer=n(),meanFGMade=mean(FieldGoalsMade),\n                meanFGAtt=mean(FieldGoalsAttempted))\nknitr::kable(head(group2,3))\n```\n\n排序 arrange()\n====================================\n排序功能，預設為**遞增排序**\n```{r arrange1,eval=F}\narrange(NBA1516,TotalMinutesPlayed)\n```\n```{r arrange1.1,echo=F}\narrange1<-arrange(NBA1516,TotalMinutesPlayed)\nknitr::kable(head(arrange1)) \n```\n\n遞減排序 arrange()\n====================================\n使用`desc()`將要**遞減排序**的變數包起來，就可以遞減排序\n```{r arrange2,eval=F}\narrange(NBA1516,\n        desc(TotalMinutesPlayed),\n        desc(GamesPlayed))\n```\n```{r arrange2.1,echo=F}\narrange2<-arrange(NBA1516,desc(TotalMinutesPlayed),desc(GamesPlayed))\nknitr::kable(head(arrange2,3))\n```\n\ndplyr綜合範例\n====================================\n- 結合`group_by()`、`summarise()`、`arrange()`，可完成一連串的資料分析\n- 計算各**隊**各**守備**位置（以Team和Position作為分組依據）的球員數、平均投進的兩分球數以及平均投出的兩分球數，並依平均投進的兩分球數**由大到小排序**\n```{r arrange3,eval=F}\ngroup_by(NBA1516,Team,Position) %>%\n  summarise(nPlayer=n(),\n    meanFGMade=mean(FieldGoalsMade),\n    meanFGAtt=mean(FieldGoalsAttempted)) %>%\n  arrange(desc(meanFGMade))\n```\n```{r arrange3.1,echo=F}\narrange3<-group_by(NBA1516,Team,Position)%>%\n  summarise(nPlayer=n(),meanFGMade=mean(FieldGoalsMade),\n                meanFGAtt=mean(FieldGoalsAttempted)) %>%\n  arrange(desc(meanFGMade))\nknitr::kable(head(arrange3,3))\n```\n\n修改欄位名稱 rename()\n====================================\n`新名稱=舊名稱`\n```{r rename1}\nrename1<-rename(NBA1516,Po=Position)\nrename1[1:5,1:5]\n```\n\ndplyr 綜合練習\n====================================\ntype:alert\nincremental:true\n\n- 讀入NBA資料\n```{r eval=F}\nlibrary(SportsAnalytics)\nlibrary(dplyr)\nNBA1516<-fetch_NBAPlayerStatistics(\"15-16\")\n```\n- 試著用dplyr語法篩選出所有**助攻數(Assists)超過100**且**抄截數大於20**的球員資料\n- 依**守備位置**Position分組，計算球員的平均**出場數**GamesPlayed，平均**出場分鐘數**TotalMinutesPlayed\n- 依平均出場數GamesPlayed**由大到小**排序\n- 用pipe **%>%**\n\ndplyr 參考文件與資源\n====================================\n- [Introduction to dplyr](https://cran.rstudio.com/web/packages/dplyr/vignettes/introduction.html)\n- DataCamp互動式教學課程 [Data Manipulation in R with dplyr](https://www.datacamp.com/courses/dplyr-data-manipulation-r-tutorial)\n\n\n長表與寬表\n====================================\ntype:sub-section\n\n- 在資料處理的過程中，常因各種需求，需要執行長寬表互換的動作\n- reshape2 package提供完整的轉換功能\n    - 寬表轉長表 `melt(資料框/寬表,id.vars=需要保留的欄位)`\n    - 長表轉寬表 `dcast(資料框/長表,寬表分列依據~分欄位依據)`\n    \n長表與寬表\n====================================\n原來的`airquality`資料框中，有Ozone, Solar.R, Wind, Temp, Month, Day等六個欄位 (Column)，屬於寬表\n```{r eval=F}\nhead(airquality,3)\n```\n```{r echo=F}\nknitr::kable(head(airquality,3)) \n```\n\n寬表轉長表 melt（）\n====================================\n\n- 保留Month和Day兩個欄位\n- 將其他欄位的名稱整合至variable欄位，數值整合至value欄位\n```{r}\nlibrary(reshape2)\nairqualityM<-melt(airquality,id.vars = c(\"Month\",\"Day\")) ##欄位需要保留\"Month\",\"Day\"\n```\n```{r eval=F}\nhead(airqualityM)\n```\n```{r echo=F}\nknitr::kable(head(airqualityM)) \n```\n\n長表轉寬表 dcast（）\n====================================\n\n- `airqualityM`資料框中，剩下Month, Day, variable, value等四個欄位 (Column)，屬於長表\n- variable欄位的值轉換為新欄位，並將value欄位填回新增的欄位\n\n```{r}\n#欄位保留\"Month\",\"Day\"外，其他欄位由variable定義\nairqualityCast<-dcast(airqualityM, Month +Day~variable) \n```\n```{r eval=F}\nhead(airqualityCast)\n```\n```{r echo=F}\nknitr::kable(head(airqualityCast))\n```\n\n",
    "created" : 1500611109695.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1906055587",
    "id" : "A328DD46",
    "lastKnownWriteTime" : 1500611439,
    "last_content_update" : 1500611439040,
    "path" : "C:/Users/yjtseng/Dropbox/CGU/CGMH_R/EDA.Rpres",
    "project_path" : "EDA.Rpres",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_presentation"
}