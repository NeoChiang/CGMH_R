{
    "collab_server" : "",
    "contents" : "R語言基礎+資料載入與前處理\n========================================================\nauthor: 長庚資管 曾意儒 Yi-Ju Tseng\ndate: 2017/07/24\nautosize: true\nfont-family: 'Microsoft JhengHei'\nnavigation: slide\n\n資料分析步驟\n========================================================\n- **資料匯入** \n- **資料清洗處理**並轉換為Tidy data\n- **資料分析**\n- **資料呈現與視覺化**\n\n\n在分析之前\n========================================================\n- RStudio怎麼用？\n- R基本語法\n- R資料結構\n\n\nRStudio Interface\n========================================================\nleft: 30%\n共有四個區塊，分別為：\n\n- 程式碼編輯區 Source editor\n- 執行視窗 Console\n- 環境/物件\n- 檔案/圖表/說明文件\n\n***\n\n```{r echo=FALSE}\nknitr::include_graphics(\"figures/RStudio.png\")\n```\n\nRStudio 使用步驟\n========================================================\n- New Project (如果原本沒有的話) **CGMH_R**\n- New R Script (如果原本沒有的話) **0724.R**\n- 在左上方**程式碼編輯區 Source editor**撰寫程式碼\n- 將需要執行的程式碼反白，點選**Run**，或**Ctrl+Enter**，執行程式碼\n- 將游標移至需要執行的程式碼，點選**Run** 也可執行該行程式碼\n- 程式碼會在左下方Console視窗執行，顯示結果\n- 如果有畫圖，會出現在右下方視窗\n- 可在右上方視窗檢查所有變數\n\nConsole視窗\n========================================================\n- R是可**直譯**的語言\n- 可在執行視窗(左下Console)直接打程式碼\n- **>** : 輸入指令\n- **+** : 表示前面的程式碼還沒打完\n    - 鍵入完整的程式碼\n    - **Esc**跳出\n\nR = Base + Other Packages\n========================================================\n- 安裝套件Package的方法如下：\n```{r eval=F}\ninstall.packages(\"套件名稱\")\n```\n\n- 套件名稱需要加上雙引號\n```{r eval=F}\ninstall.packages(\"ggplot2\")\n```\n\n- 載入**已安裝**的套件：\n```{r eval=F}\nlibrary(ggplot2)\n```\n\n- **不用**在套件名稱前後加雙引號\n\n\nFunctions - Basic\n========================================================\n- 內建Functions函數\n- 安裝Packages套件後各套件也會提供多種函數\n- 使用方式: `函數名稱(參數1,參數2,....)`\n- `?函數名稱` 查詢所需參數與說明\n以計算平均數為例，可使用`mean()`函數:\n```{r}\n##計算1~6的平均數\nmean(c(1,2,3,4,5,6)) \n```\n\nFunctions - Arguments 順序\n========================================================\n- 函數的參數設定有順序性\n- 不想照順序-->指定參數名稱\n\n如序列產生函數`seq()`，參數順序為`from, to, by`，代表序列起點、序列終點，以及相隔單位。\n```{r}\n#1~9，每隔2產生一數字\nseq(from=1,to=9,by=2)\n```\n\nFunctions - Arguments 順序\n========================================================\n```{r}\nseq(from=1,to=9,by=2)\n#按照順序輸入參數，可省去參數名稱\nseq(1,9,2)\n#不照順序輸入，需要參數名稱\nseq(by=2,to=9,from=1)\n```\n\nVariable [<-]\n========================================================\n- 使用 `<-` 設定變數\n- **變數名稱** `<-` **變數內容(值)**\n- **變數名稱**可依箭頭方向放置於左側 `<-` 或右側 `->` \n- 但為方便閱讀，**變數名稱**多放置於左側\n\n```{r first}\na<-1 \na\n2->b\nb\n```\n\nVariable 命名規則\n========================================================\n- 不可使用保留字\n    - break, else, FALSE, for, function, if, Inf, NA, NaN, next, repeat, return, TRUE, while等\n- 開頭只能是英文字，或 `.`\n- 大小寫敏感\n\n\n資料型態\n========================================================\n- **數值 (numeric)**\n- **字串 (character)**\n- **布林變數 (logic)**\n- **日期 (Date)**\n\n數值 (numeric)\n========================================================\n數值包括\n- 整數integer（沒有小數點）\n```{r num1}\nnum1<-100 \n```\n- 浮點數（有小數點）\n```{r num2}\nnum2<-1000.001\n```\n\n\n字串 (character)\n========================================================\n- 用雙引號`\"`框起 : 字串格式\n- 數字前後加上雙引號 : 字串格式\n    - 無法進行數值的加減乘除\n```{r char1}\nchar1<-\"abcTest\" \nchar2<-\"100\"\nchar3<-\"200\"\n#char2+char3 \n#會輸出Error message: non-numeric argument to binary operator\n```\n\n\n布林變數 (logic)\n========================================================\n- 用於邏輯判斷\n- 大寫**TRUE**或**T**代表**真**\n- 大寫**FALSE**或**F**代表**假**\n```{r bool1}\nboolT<-TRUE\nboolT1<-T\nboolF<-FALSE\nboolF1<-F\nboolT\nboolF1\n```\n\n日期 (Date)\n========================================================\n- 表示日期\n- `Sys.Date()`可得系統日期\n\n```{r date1}\ndateBook<-Sys.Date()\ndateBook\n```\n\n\n資料型態包括?\n====================================\ntype:alert\n\n\n基本運算子: 數學運算\n========================================================\n數學運算與其他程式語言相同\n\n- 加 `+`\n- 減 `-`\n```{r math1L}\nnum1<-1\nnum2<-100\nnum1+num2\nnum1-num2\n```\n***\n- 乘 `*`\n- 除 `/`\n- 餘數 `%%`\n- 次方 `^`\n```{r math1r}\nnum1*num2\nnum1/num2\n```\n\n\n基本運算子: 邏輯運算\n========================================================\n常用之邏輯判斷也可在R中直接使用\n- 大於 `>`\n- 小於 `<`\n```{r log1L}\nnum1<-1\nnum2<-100\nnum1>num2\nnum1<num2\n```\n\n***\n\n- 等於 `==`，**雙等號**\n- 大於等於 `>=`\n- 小於等於 `<=`\n```{r log1R}\nnum1==num2\n1==1\n```\n\n基本運算子: 邏輯運算\n========================================================\n文字字串也可比較大小\n```{r log2}\nchar1<-\"abcTest\" \nchar2<-\"defTest\"\nchar1>char2\n```\n\n基本運算子: 邏輯判斷\n========================================================\n在R中使用**單符號**即可表示且`&`和或`|`\n- 且 `&`\n\n```{r log3l}\nTRUE & TRUE\nTRUE & FALSE\n```\n\n***\n在R中使用**單符號**即可表示且`&`和或`|`\n- 或 `|`\n```{r log3r}\nTRUE | TRUE\nTRUE | FALSE\n```\n基本運算子: 反向布林變數 !\n========================================================\n\n```{r log4}\n!TRUE\n!FALSE\n```\n\n\n解讀錯誤訊息\n========================================================\n\n- Message：有可能的錯誤通知，程式會繼續執行\n- Warning：有錯誤，但是不會影響太多，程式會繼續執行\n- Error：有錯，而且無法繼續執行程式\n- Condition：可能會發生的情況\n```{r}\nlog(-1)\n```\n```{r, error=T}\nmena(NA)\n```\n\n解讀錯誤訊息 範例\n========================================================\n```\n# Error: could not find function \"fetch_NBAPlayerStatistics\"\n# 找不到\"fetch_NBAPlayerStatistics\" function\n```\n可能原因：沒安裝或沒讀入SportsAnalytics package\n\n\n```\n# Error in library(knitr): there is no package called 'knitr'\n# 找不到\"knitr\" package\n```\n可能原因：沒安裝knitr package\n\nHelp\n========================================================\n- R語言與套件均有完整的文件與範例可以參考\n- 輸入`?函數名稱`或`?套件名稱`\n```{r eval=F}\n?ggplot2\n?ymd\n```\n\n- Google\n- [Stack Overflow](http://stackoverflow.com/)也有許多問答\n\n\nR 常見的資料結構\n========================================================\n- **向量** Vector\n- **因子** Factor\n- 列表 List\n- 矩陣 Matrix\n- **資料框** data.frame\n- 屬性查詢函數 **str()**\n\n向量 Vector\n========================================================\ntype:sub-section\n- 一維資料\n- 所有元素之**資料型態必須相同**\n- `c()`函數 定義向量\n```{r vector1}\nvec<-c('a','b','c','d','e')\n```\n\n- a~e: **元素(element)**\n- 順序固定\n    - `a`: 第**1**個元素\n    - `b`: 第**2**個元素\n\n向量 Vector 取值\n========================================================  \n\n若要將`vec`向量的第**4**個元素取出，可使用**向量名稱[元素位置]**: \n```{r vector2}\nvec[4] ## 第4個元素\n```\n也可同時取出多個元素\n```{r vector21}\nvec[c(2,3)] ## 第2與第3個元素\n```\n\n\n向量 Vector 元素設定\n========================================================   \n```{r vector22}\nvec[3]\nvec[3]<-'z' ##第三個元素值設定為“z”\nvec[3] \n```\n\n產生向量函數\n========================================================   \n\n若要產生連續向量，如1~20，可使用`:`來串連首字與最後一字\n```{r vector3}\n1:20 ## c(1,2,...,19,20)\n```\n\n向量取值練習\n====================================\ntype:alert\nincremental:true\n\n- 新增一向量a，包含數字1到10\n- 新增一向量b，包含數字1到20中的所有偶數\n- 取出a向量的第4個元素\n- 取出b向量的第5,6,7個元素\n\n\n向量運算\n========================================================  \n向量也可直接做加減乘除運算，如\n```{r vector5}\nnumvec<-1:10 ## c(1,2,3,4,5,6,7,8,9,10)\nnumvec+3 ## 所有元素+3\nnumvec*2 ## 所有元素*2\n```\n\n向量運算\n========================================================  \n向量和向量也可做運算，如\n```{r vector6}\nnumvec1<-1:3 ## c(1,2,3)\nnumvec2<-4:6 ## c(4,5,6)\nnumvec1+numvec2\nnumvec1*numvec2\n```\n\n向量運算練習\n====================================\ntype:alert\nincremental:true\n\n- 新增一向量a，包含數字1到10\n- 新增一向量b，包含數字1到10中的所有偶數\n- a+b=?\n\n因子 factor\n========================================================\ntype:sub-section\n- 由向量轉換而成\n- 表示**類別**數據\n- 使用方法為`factor(資料向量,levels=類別次序)`\n```{r factor1}\nfactor(c(\"門診\",\"住院\",\"急診\"),\n       levels = c(\"門診\",\"住院\",\"急診\"))\n```\n因子變量一但決定其類別的種類與數目時，通常不會再作更動，也就是任何新增的元素都要門診、住院、急診其中一種。\n\n\n資料框 data.frame\n======================================================== \ntype:sub-section\n- 二維資料格式 (像Excel試算表)\n- 由欄位（Column）和列（Row）組成\n- 使用`data.frame()`來創建新的資料框\n```{r dataframe1}\n##欄位名稱=欄位值\nStuDF <- data.frame(StuID=c(1,2,3), \n                  name=c(\"小明\",\"大雄\",\"胖虎\"),\n                  score=c(80,60,90))\nStuDF \n```\n\n\n資料框 data.frame\n======================================================== \n- 每列：觀察值 / 每欄：變數\n- 欄位需有名稱\n    - StuID, name, score\n    - 若沒有設定，自動指派V1~Vn\n- 欄位的資料型態相同\n- 每一列有列名\n    - 依序指派1~n作為列名\n\n\n資料框 data.frame\n======================================================== \n\n```{r}\ncolnames(StuDF) #檢查欄位名稱\nrownames(StuDF) #檢查列名\nnrow(StuDF) #幾列\nncol(StuDF) #幾欄\n```\n\n資料框 data.frame\n======================================================== \n如需檢查個欄位之資料型別，可使用`str()`函數\n\n**解釋iris資料框**???\n\n```{r}\nstr(iris) \n```\n\n資料框資料擷取\n======================================================== \n資料框可用`$`符號做**欄位**資料擷取\n```{r}\n#取得iris資料框中的Species欄位的第1,11,21,31個值\niris$Species[c(1,11,21,31)] \n```\n\n資料框資料編輯\n======================================================== \n資料框可用`$`符號做**欄位**資料擷取後，當成向量，並使用**[ ]**做資料編輯。\n```{r}\niris$Species[2]<-\"versicolor\"\niris$Species[1:4]\n```\n\n資料框資料編輯練習\n====================================\ntype:alert\nincremental:true\n\n- iris$Time<-1 會發生什麼事情?\n\n\n\n資料分析步驟\n========================================================\n- **資料匯入** \n- 資料清洗處理並轉換為Tidy data\n- 資料分析\n- 資料呈現與視覺化\n\n\n資料匯入\n====================================\n- 從檔案匯入\n- 資料匯出\n\n從檔案匯入\n====================================\ntype:section\n- Import Dataset功能 (RStudio)\n- R物件 .rds\n- R程式 .R\n\nImport Dataset功能 (RStudio)\n====================================\n選取RStudio四分割視窗右上角的Environment標籤，選擇**Import Dataset**\n\n```{r echo=FALSE}\nknitr::include_graphics(\"figures/import.png\")\n```\n\nImport Dataset功能 (RStudio)\n====================================\n- 選取`From CSV`\n- 點選`Browse`按鈕開啟檔案選取器\n\n```{r echo=FALSE}\nknitr::include_graphics(\"figures/csv.png\")\n```\n\nImport Dataset功能 (RStudio)\n====================================\n- 利用下方`Import Options`的選項微調參數\n    - `Delimiter`分隔符號\n    - `First Row as Names`首列是否為欄位名稱\n    \n```{r echo=FALSE}\nknitr::include_graphics(\"figures/csv2.png\")\n```\n\nImport Dataset功能 (RStudio)\n====================================\ntype:alert\nincremental:true\n\n- 操作**範例檔案**，Basic.csv\n- 若匯入的檔案為**tab分隔文字檔**? 該如何調整參數？\n\nR物件 .rds\n====================================\ntype:sub-section\n如果在R程式內處理完資料後，必須儲存一份以供後續分析，使用R物件儲存是最佳的方式\n\n- 檔案小\n- 讀取快速\n- 推薦使用`readRDS()`函數讀取RDS檔案\n- [A better way of saving and loading objects in R](http://www.fromthebottomoftheheap.net/2012/04/01/saving-and-loading-r-objects/)\n```{r eval=F}\ndataset <- readRDS(\"檔案路徑與名稱\")\n```\n\n\n資料匯出\n====================================\ntype:section\n- 文字檔 .txt\n- CSV檔 .csv\n- R物件 .rds\n\n\nCSV檔 .csv\n====================================\n```{r eval=FALSE}\nwrite.csv(iris,file=\"iris.csv\",row.names = F)\n```\n- 要匯出的資料\n- `file` 檔案名稱\n- `append` T/F T:在檔案後加字，F:直接覆蓋檔案 (預設F)\n- `quote` 是否需要用雙引號將字串包起 (預設T)\n- `row.names` T/F 是否需要輸出row names\n- `col.names` T/F 是否需要輸出column names\n- `fileEncoding` 編碼設定\n\n\n\nR物件 .rds\n====================================\n\n若是要在R的環境繼續使用，建議匯出成R物件檔案(.rds)\n```{r eval=FALSE}\nsaveRDS(iris,\"iris.rds\")\n```\n\n資料分析步驟\n========================================================\n- 資料匯入\n- **資料清洗處理**並轉換為Tidy data\n- 資料分析\n- 資料呈現與視覺化\n\n\n資料清洗與處理\n====================================\n- Tidy Data\n- 資料型別轉換處理\n- 文字字串處理\n- 子集Subset\n- 排序\n- 資料組合\n- 長表與寬表\n\nTidy Data\n====================================\ntype:sub-section \n\nEach column is a variable. Each row is an observation.\n\n- 一個欄位（Column）內只有一個數值，最好要有凡人看得懂的Column Name\n- 不同的觀察值應該要在不同行（Row）\n- 一張表裡面，有所有分析需要的資料\n- 如果一定要多張表，中間一定要有index可以把表串起來\n- One file, one table\n\n\n\n資料型別轉換處理\n====================================\ntype:sub-section \n包括**資料型別檢查**與**資料型別轉換**\n\n資料型別:\n\n- 數值 (numeric)\n- 字串 (character)\n- 布林變數 (logic)\n- 日期 (Date)\n\n\n資料型別檢查 - is.\n====================================\n使用`is.`函數檢查資料型別，回傳布林變數，若為**真**，回傳**TRUE**\n\n- 是否為**數字** `is.numeric(變數名稱)`\n- 是否為**文字** `is.character(變數名稱)`\n- 是否為**布林變數** `is.logical(變數名稱)`\n\n```{r message=F}\nlibrary(readr)\nEMDiagS <- read_csv(\"EMDiagS.csv\") #自行載入\nis.numeric(EMDiagS$疾病序號)\nis.character(EMDiagS$疾病序號)\n```\n\n資料型別檢查 - class()\n====================================\n使用`class(變數名稱)`函數，直接回傳**資料型別**\n```{r}\nclass(EMDiagS$疾病序號)\nclass(Sys.Date())\n```\n\n\n資料型別轉換 - as.\n====================================\n\n使用`as.`函數轉換型別\n\n- 轉換為**數字** `as.numeric(變數名稱)`\n- 轉換為**文字** `as.character(變數名稱)`\n- 轉換為**布林變數** `as.logical(變數名稱)`\n\n```{r}\ncha<-\"100\"\nas.numeric(cha)\n```\n\n資料型別轉換 - as.\n====================================\n\n若無法順利完成轉換，會回傳空值`NA`，並出現警告訊息\n```{r}\nas.numeric(\"abc\")\n```\n\n\n\n資料型別轉換練習\n====================================\ntype:alert\nincremental:true\n\n資料年月是整數型別 (integer)，該如何將這此欄位轉成文字呢？\n```{r}\nlibrary(readr)\nEMDiagS <- read_csv(\"EMDiagS.csv\") #自行載入\nstr(EMDiagS)\n```\n\n\n日期 (Date) - lubridate\n========================================================\n- `lubridate` package : 日期與字串的相關轉換操作\n- `ymd()`函數 : 將`年/月/日`格式的文字轉換為日期物件\n    - y表年year\n    - m表月month\n    - d表日day\n```{r date2,message=F}\n#install.packages(\"lubridate\") 第一次使用需安裝\nlibrary(lubridate)\nymd('2012/3/3')\n```\n\n\n日期 (Date) - lubridate\n========================================================\n- `mdy()`函數 : 將`月/日/年`格式的文字轉換為日期物件\n    - y表年year\n    - m表月month\n    - d表日day\n- 以此類推\n\n```{r date3,message=F}\nmdy('3/3/2012')\n```\n\n- 其他使用方法：[The Yhat Blog](http://blog.yhat.com/static/pdf/R_date_cheat_sheet.pdf)\n\n\n資料型別轉換練習\n====================================\ntype:alert\nincremental:true\n\n輸入日期是整數型別 (integer)，該如何將這此欄位轉成日期呢？\n```{r}\nlibrary(readr)\nEMDiagS <- read_csv(\"EMDiagS.csv\") #自行載入\nstr(EMDiagS)\n```\n\n\n文字字串處理\n====================================\ntype:sub-section \n\n- 基本處理\n- 搜尋字串\n- [Regular Expression 正規表示式 @ R](https://github.com/CGUIM-BigDataAnalysis/BigDataCGUIM/blob/master/105/RegularExpression.md)\n\n基本處理\n====================================\n\n- 切割 `strsplit()` **Split**\n- 子集 `substr()` **sub string**\n- 大小寫轉換 `toupper()` `tolower()`\n- 兩文字連接 `paste()` `paste0()`\n- 文字取代 `gsub()` **substitute**\n- 前後空白去除 `str_trim()` 需安裝`stringr` package **trim**\n\n基本處理-切割\n====================================\nstrsplit (欲切割的字串,用什麼符號切割)\n```{r}\nstrsplit (\"Hello World\",\" \")\n```\n\n基本處理-切割（多字元）|\n====================================\nstrsplit (欲切割的字串,切割符號1|切割符號2|...)\n```{r}\nstrsplit (\"Hello World\",\" |o\")\n```\n\n基本處理-子集（切一小段）\n====================================\nsubstr(欲做子集的字串,開始位置,結束位置)\n```{r}\nsubstr(\"Hello World\", start=2,stop=4)\n```\n\n基本處理-大小寫轉換\n====================================\n```{r}\ntoupper(\"Hello World\")\ntolower(\"Hello World\")\n```\n\n基本處理-兩文字連接\n====================================\npaste(欲連接的字串1, 欲連接的字串2, 欲連接的字串3,.... sep=中間用什麼符號分隔)\n```{r}\npaste(\"Hello\", \"World\")\npaste(\"Hello\", \"World\", sep='')\npaste0(\"Hello\", \"World\")\n```\n\n基本處理-文字取代\n====================================\ngsub(想要換掉的舊字串,想要換成的新字串,欲作取代的完整字串)\n```{r}\ngsub(\"o\",\"0\",\"Hello World\")\n```\n\n基本處理-文字取代（多字元）|\n====================================\ngsub(想要換掉的舊字串1|想要換掉的舊字串2|...,想要換成的新字串,欲作取代的完整字串)\n```{r}\ngsub(\"o|l\",\"0\",\"Hello World\")\n```\n\n基本處理-前後空白去除\n====================================\nstr_trim要使用前需要安裝與載入**stringr**套件\n```{r}\nlibrary(stringr)\nstr_trim(\" Hello World \")\n```\n\n\n搜尋字串\n====================================\n- 通常使用在**比對文字向量**\n- **有分大小寫**\n- 依照回傳值的型態不同，有兩種常用函數\n    - 回傳符合條件之向量位置(index) `grep(搜尋條件,要搜尋的向量)`\n    - 回傳每個向量是否符合條件(TRUE or FALSE) `grepl(搜尋條件,要搜尋的向量)`\n\n```{r}\n##在姓名文字向量中尋找A，回傳包含\"A\"之元素位置\ngrep(\"A\",c(\"Alex\",\"Tom\",\"Amy\",\"Joy\",\"Emma\")) \n```\n\n搜尋字串 - grepl()\n====================================\n```{r}\n##在姓名文字向量中尋找A，回傳各元素是否包含\"A\"\ngrepl(\"A\",c(\"Alex\",\"Tom\",\"Amy\",\"Joy\",\"Emma\")) \n##在姓名文字向量中尋找a，回傳各元素是否包含\"a\"\ngrepl(\"a\",c(\"Alex\",\"Tom\",\"Amy\",\"Joy\",\"Emma\")) \n```\n\n搜尋字串 - grep()\n====================================\n```{r}\n##在姓名文字向量中尋找A，回傳包含\"A\"的元素位置\ngrep(\"A\",c(\"Alex\",\"Tom\",\"Amy\",\"Joy\",\"Emma\")) \n##在姓名文字向量中尋找a，回傳包含\"a\"的元素位置\ngrep(\"a\",c(\"Alex\",\"Tom\",\"Amy\",\"Joy\",\"Emma\")) \n```\n\n搜尋字串 - grep()\n====================================\ntype:alert\n多字元？\n\n搜尋字串 - grep()\n====================================\ntype:alert\n- 搜尋所有疾病碼中，包含250的資料\n```{r message=F}\nlibrary(readr)\nEMDiagS <- read_csv(\"EMDiagS.csv\") #自行載入\n```\n\n\n子集Subset - 一維資料\n====================================\ntype:sub-section \n\n之前有介紹使用`[ ]`取出單一或多個元素的方法\n```{r}\n##R語言內建資料之一\nletters \n##取出letters向量的第一個元素\nletters[1] \n```\n\n子集Subset - 一維資料\n====================================\n\n也可以用“負號”去掉不要的資料\n```{r}\n##取出letters向量的第1,3,5個元素\nletters[c(1,3,5)] \n##取出letters向量除了第1,3,5個元素之外的所有元素\nletters[c(-1,-3,-5)] \n```\n\n子集Subset - 一維資料\n====================================\n若想要快速取得一向量的開頭與結尾元素，可使用`head()`和`tail()`函數\n```{r}\n##取出letters向量的前五個元素\nhead(letters,5) \n##取出letters向量的後三個元素\ntail(letters,3) \n```\n\n子集Subset - 二維資料\n====================================\ntype:sub-section \n- 可針對列(Row)和行(Column)做子集\n- 使用`[ ]`，但因應二維資料的需求，以`,`分隔列與行的篩選條件\n- 資料篩選原則為**前Row,後Column**，**前列,後行**\n- 若不想篩選列，則在`,`前方保持**空白**即可。\n- 篩選方式可輸入**位置(index)**、**欄位名稱**或輸入**布林變數(TRUE/FALSE)**\n    - 輸入位置: `dataFrame[row index,column index]`\n    - 輸入布林變數: `dataFrame[c(T,F,T),c(T,F,T)]`\n    - 輸入欄位名稱: `dataFrame[row name,column name]`\n\n子集Subset - 二維資料 []\n====================================\n```{r}\n##第一列Row，第二行Column\niris[1,2] \n```\n```{r eval=F}\n##第1~3列Row，所有的行Column\niris[1:3,] \n```\n```{r echo=F}\n##第1~3列Row，所有的行Column\nknitr::kable(iris[1:3,]) \n```\n\n子集Subset - 二維資料 []\n====================================\n```{r eval=F}\n##第1~10列Row，第1,3,5行Column (TRUE)\niris[1:10,c(T,F,T,F,T)] \n```\n```{r echo=F}\nknitr::kable(iris[1:10,c(T,F,T,F,T)]) ##第1~10列Row，第1,3,5行Column (TRUE)\n```\n\n子集Subset - 二維資料 []\n====================================\n```{r}\n##所有的列Row，名稱為Species的行Column\niris[,\"Species\"] \n```\n\n子集 [ ] 練習\n====================================\ntype:alert\nincremental:true\n\n- 取出iris資料集\"Species\"欄位的前十列(Row)\n- 取出iris資料集所有單數列(Row)\n- 取出iris資料集最後兩個欄位的所有偶數列(Row)\n\n子集Subset - 二維資料 $\n====================================\n也可使用`$`符號做**Column的篩選**\n```{r}\n# 等同於iris[,\"Species\"]\n##所有的列Row，名稱為Species的行Column\niris$Species \n```\n\n\n子集Subset - 二維資料grepl()\n====================================\n**Row的篩選**也可搭配字串搜尋函數`grepl()`\n```{r eval=F}\ngrepl(\"color\",iris$Species)\n##Species包含\"color\"的列，所有的行\niris[grepl(\"color\",iris$Species),] \n```\n```{r echo=F}\nhead(grepl(\"color\",iris$Species))\nknitr::kable(head(iris[grepl(\"color\",iris$Species),]))\n```\n\n子集Subset - head()\n====================================\n\n若想要快速取得資料框的前幾列(Row)或後幾列，也可使用`head()`和`tail()`函數\n```{r eval=F}\n ##取出iris資料框的前五列\nhead(iris,5)\n```\n```{r echo=F}\nknitr::kable(head(iris,5)) \n```\n\n子集Subset - tail()\n====================================\n\n若想要快速取得資料框的前幾列(Row)或後幾列，也可使用`head()`和`tail()`函數\n```{r eval=F}\n##取出iris資料框的後三列\ntail(iris,3) \n```\n```{r echo=F}\nknitr::kable(tail(iris,3))\n```\n\n\n子集綜合練習\n====================================\ntype:alert\nincremental:true\n\n- 取出急診診斷資料中，所有疾病碼等於25000的診斷資料\n    - [ ]\n- 取出內建資料集mtcars中，所有疾病碼為250開頭的診斷資料\n    - grepl()\n    - [ ]\n\n```{r}\nlibrary(readr)\nEMDiagS <- read_csv(\"EMDiagS.csv\") #自行載入\nstr(EMDiagS)\n```\n\n\n\n資料組合\n====================================\ntype:sub-section\n\n有時需要在資料框新增一列，或新增一行\n\n- Row 列的組合 `rbind()`\n- Column 行的組合 `cbind()`\n\n`rbind()`和`cbind()`的參數可以是向量，也可以是資料框\n\n資料組合 - rbind()\n====================================\n\n使用向量做資料整合範例:\n```{r}\nrbind(c(1,2,3), #第一列\n      c(4,5,6)  #第二列\n      ) \n```\n\n資料組合 - rbind()\n====================================\n\n使用資料框與向量做資料整合範例:\n```{r warning=F}\nirisAdd<-rbind(iris, #資料框\n      c(1,1,1,1,\"versicolor\")  #新增一列\n      ) \n```\n```{r eval=F}\ntail(irisAdd,2)\n```\n```{r echo=F}\nknitr::kable(tail(irisAdd,2)) \n```\n\n資料組合 - cbind()\n====================================\n\n使用向量做資料整合範例:\n```{r}\ncbind(c(1,2,3), #第一行\n      c(4,5,6)  #第二行\n      ) \n```\n\n資料組合 - cbind()\n====================================\n\n使用資料框與向量做資料整合範例:\n```{r warning=F}\nirisAdd<-cbind(iris, #資料框\n      rep(\"Add\",nrow(iris))  #新增一行\n      ) \n```\n```{r eval=F}\ntail(irisAdd,1)\n```\n```{r echo=F}\nknitr::kable(tail(irisAdd,1)) \n```\n\n    \n資料結合 (Join)\n====================================\n\n除了按照行列順序的組合外，更常有的情形是依照某個欄位的值作為結合依據，如：\n\n- 用歸戶代號把以下兩個資料框結合成一個資料框\n    - 門診診斷資料框\n    - 病人基本資料資料框\n\n資料結合 (Join)\n====================================\n原生的R環境可以用`merge()`函數將資料框結合，使用方法為`merge(資料框1,資料框2,by=\"結合依據欄位\")`\n\n```{r}\nBasicS <- read_csv(\"BasicS.csv\")\nEMDiagS <- read_csv(\"EMDiagS.csv\")\n```\n\n資料結合 (Join)\n====================================\n```{r, eval=F}\nhead(BasicS)\n```\n```{r, echo=F}\nknitr::kable(head(BasicS))\n```\n\n資料結合 (Join)\n====================================\n```{r, eval=F}\nhead(EMDiagS)\n```\n```{r, echo=F}\nknitr::kable(head(EMDiagS))\n```\n\n資料結合 (Join) 更有效率的做法\n====================================\n\n`dplyr`套件提供更有效率的資料結合方法，包括:\n\n- inner_join()：保留有對應到的資料\n- left_join()：保留左邊資料框的所有資料\n- right_join()：保留右邊資料框的所有資料\n- full_join()：保留所有資料\n- semi_join()\n- anti_join()\n\n資料結合 - inner_join()\n====================================\n只保留兩張表都有的列\n使用方法 `inner_join(x, y, by = )`\n\n```{r}\n#install.packages(\"dplyr\") 第一次使用先安裝\nlibrary(dplyr)\ninner_join(BasicS,EMDiagS,by=\"歸戶代號\")\n```\n\n資料結合 - left_join()\n====================================\n保留左邊的表所有的列\n使用方法 `left_join(x, y, by = )`\n\n```{r}\nlibrary(dplyr)\nleft_join(BasicS,EMDiagS,by=\"歸戶代號\")\n```\n\n資料結合 - right_join()\n====================================\n保留右邊的表所有的列\n使用方法 `right_join(x, y, by = )`\n\n```{r}\nlibrary(dplyr)\nright_join(BasicS,EMDiagS,by=\"歸戶代號\")\n```\n\n資料結合 - full_join()\n====================================\n保留所有的列\n使用方法 `full_join(x, y, by = )`\n\n```{r}\nlibrary(dplyr)\nfull_join(BasicS,EMDiagS,by=\"歸戶代號\")\n```\n\n資料結合 - semi_join()\n====================================\n留下左邊的ID也有出現在右邊的表的列，右表資料不會輸出\n使用方法 `semi_join(x, y, by = )`\n\n```{r}\nlibrary(dplyr)\nsemi_join(BasicS,EMDiagS,by=\"歸戶代號\")\n```\n\n資料結合練習\n====================================\ntype:alert\n\n- 讀入門診診斷檔OptDiagS.csv\n- 讀入門診醫囑檔OptOrderS.csv\n- 依照**歸戶代號**以及**門診號**，將兩張表格結合，只留下有對應到的資料\n  - 提示: by=c()\n- 請問結合後的資料有幾列？\n\n\n\n遺漏值處理\n====================================\ntype:sub-section\n\n- 遺漏值(Missing Value)常常出現在真實資料內，在數值運算時常會有問題\n- 最簡單的方法是將有缺值的資料移除\n\n遺漏值處理 is.na()\n====================================\n如資料為向量，可使用`is.na()`來判斷資料是否為空值`NA`，若為真`TRUE`，則將資料移除。\n```{r}\nnaVec<-c(\"a\",\"b\",NA,\"d\",\"e\")\nis.na(naVec)\nnaVec[!is.na(naVec)] ##保留所有在is.na()檢查回傳FALSE的元素\n```\n\n\n\n遺漏值處理 complete.cases()\n====================================\n若資料型態為資料框，可使用`complete.cases`來選出完整的資料列\n```{r eval=F}\nhead(airquality,5)\n```\n```{r echo=F}\nknitr::kable(head(airquality,5))\n```\n```{r}\ncomplete.cases(airquality) \n```\n\n遺漏值處理 complete.cases()\n====================================\n若資料型態為資料框，可使用`complete.cases`來選出完整的資料列，如果資料列(row)是完整的，則會回傳**TRUE**\n\n```{r eval=F}\n##保留所有在complete.cases()檢查回傳TRUE的元素\nhead(airquality[complete.cases(airquality),]) \n```\n```{r echo=F}\nknitr::kable(head(airquality[complete.cases(airquality),]))\n```\n",
    "created" : 1500610882245.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1929819071",
    "id" : "99B5E1BB",
    "lastKnownWriteTime" : 1500634137,
    "last_content_update" : 1500634137457,
    "path" : "C:/Users/yjtseng/Dropbox/CGU/CGMH_R/BasicRandDataImport.Rpres",
    "project_path" : "BasicRandDataImport.Rpres",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_presentation"
}